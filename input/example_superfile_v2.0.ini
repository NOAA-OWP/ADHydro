; ADHydro needs several input and output files.  The following entries specify
; the locations of those files.  The code uses the individual file paths to
; find the files, but if the individual file paths are not specified they
; default to the default filenames located in the corresponding directory path.
; If a directory path is not specified it defaults to the current directory.
;
; The net effect of this is that if all of the files in a group are in the same
; directory with the default filenames you can just specify the directory path
; and leave the file paths commented out.  Otherwise, you can specify the
; location of one or more files individually and that overrides the directory
; path for only the files that you specify so you can use the directory path
; for some files and specify other files individually.
evapoTranspirationInitDirectoryPath     = ../HRLDAS-v3.6/Run              ; Default is ".".
;evapoTranspirationInitMpTableFilePath   = ../HRLDAS-v3.6/Run/MPTABLE.TBL  ; Default is "evapoTranspirationInitDirectoryPath/MPTABLE.TBL".
;evapoTranspirationInitVegParmFilePath   = ../HRLDAS-v3.6/Run/VEGPARM.TBL  ; Default is "evapoTranspirationInitDirectoryPath/VEGPARM.TBL".
;evapoTranspirationInitSoilParmFilePath  = ../HRLDAS-v3.6/Run/SOILPARM.TBL ; Default is "evapoTranspirationInitDirectoryPath/SOILPARM.TBL".
;evapoTranspirationInitGenParmFilePath   = ../HRLDAS-v3.6/Run/GENPARM.TBL  ; Default is "evapoTranspirationInitDirectoryPath/GENPARM.TBL".

adhydroInputDirectoryPath     = /localstore/input              ; Default is ".".
;adhydroInputGeometryFilePath  = /localstore/input/geometry.nc  ; Default is "adhydroInputDirectoryPath/geometry.nc".
;adhydroInputParameterFilePath = /localstore/input/parameter.nc ; Default is "adhydroInputDirectoryPath/parameter.nc".
;adhydroInputStateFilePath     = /localstore/input/state.nc     ; Default is "adhydroInputDirectoryPath/state.nc".
;adhydroInputForcingFilePath   = /localstore/input/forcing.nc   ; Default is "adhydroInputDirectoryPath/forcing.nc".

; Normally, ADHydro reads and writes NetCDF files.  However, our mesh creation
; workflow generates a mesh as a set of ASCII files.  Rather than have a
; separate program to convert the ASCII files to NetCDF, the file manager can
; read the ASCII files directly.  Normally you would do a special initial run
; to read the ASCII files, process zero timesteps, and write out NetCDF files.
; This run is also when you would normally perform the mesh massage algorithm
; (see below). After that initial run you would use the generated NetCDF files
; for input.  Therefore, the file manager has no ability to write out ASCII
; files.  ASCII files are only meant as a temporary step to get from the mesh
; creation workflow to NetCDF files.
;initializeFromASCIIFiles = false ; Default is false.
; FIXME ascii file paths

; If any output files do not already exist they will be created and the state
; at the beginning of the simulation will be written to those files.  For any
; output files that do already exist it is assumed that you are appending
; output to a file that already has the state at the beginning of the
; simulation so that will not be written to those files.  The most common use
; for this is to continue running from the end of a previous run appending the
; new results to the same file.  New states created as the simulation runs are
; always appended to all files.
adhydroOutputDirectoryPath     = /localstore/output              ; Default is ".".
;adhydroOutputGeometryFilePath  = /localstore/output/geometry.nc  ; Default is "adhydroOutputDirectoryPath/geometry.nc".
;adhydroOutputParameterFilePath = /localstore/output/parameter.nc ; Default is "adhydroOutputDirectoryPath/parameter.nc".
;adhydroOutputStateFilePath     = /localstore/output/state.nc     ; Default is "adhydroOutputDirectoryPath/state.nc".
;adhydroOutputDisplayFilePath   = /localstore/output/display.nc   ; Default is "adhydroOutputDirectoryPath/display.nc".

; The following entries specify the map projection.  Currently, ADHydro only
; supports a sinusoidal map projection.
;centralMeridianRadians = -1.9       ; Radians.  If centralMeridianRadians is specified it takes precedence.
;centralMeridianDegrees = -109.0     ; Degrees.  Otherwise ADHydro uses centralMeridianDegrees.  If neither is specified default is value in input files.
;falseEasting           = 20000000.0 ; Meters.  Default is value in input files.
;falseNorthing          = 10000000.0 ; Meters.  Default is value in input files.

; The following entries specify dates and times.  referenceDate is a Julian
; date in days, including fractional day, since noon, January 1, 4713 BCE.
; Julian date is always in the UTC time zone.  currentTime is an elapsed time
; counter in seconds.  The current simulation time is the Julian date equal to:
;   referenceDate + (currentTime / (60.0 * 60.0 * 24.0))
;referenceDateJulian = 2451544.5 ; If referenceDateJulian is specified it takes precedence.
;referenceDateYear   = 2000      ; Otherwise ADHydro uses referenceDateYear, Month, Day, Hour, Minute, Second.  All must be specified.
;referenceDateMonth  = 1         ; If neither is specified default is value in input files.
;referenceDateDay    = 1
;referenceDateHour   = 0
;referenceDateMinute = 0
;referenceDateSecond = 0.0
;currentTime         = 0.0       ; Elapsed time counter in seconds.  Default is value in input files.
;dt                  = 1.0       ; The duration of the next timestep in seconds.  Default is value in input files.
;iteration           = 1         ; Unitless iteration counter.  Default is value in input files.
;simulationDuration  = 0.0       ; The simulation will run for this many simulated seconds.  Default is zero.  Running for zero seconds can be useful for
                                 ; initially reading in the mesh from ASCII files and outputting to NetCDF.
;checkpointPeriod    = 0.0       ; Period in simulated seconds of major output events that can be used as checkpoints to restart the simulation.  Default is
                                 ; zero meaning the simulation will checkpoint every timestep.
;outputPeriod        = 0.0       ; Period in simulated seconds of minor output events that can't be used as checkpoints to restart the simulation.  Default is
                                 ; zero meaning the simulation will output every timestep.

; The following entries specify special simulation operating modes.
;drainDownMode  = false ; If drainDownMode is true the simulation will operate in a special mode to generate a groundwater initial condition.  In this mode,
;drainDownTime  = 0.0   ; there will be no precipitation, and water level in the channels will be capped at zBank.  Any over bank water in the channels will be
                        ; thrown away and not added to water error so mass might not balance in drainDownMode.  Also, calendar time will not advance.  Things
                        ; like forcing data and sun angle that depend on absolute time will always be taken from a single point in time specified by using
                        ; drainDownTime in place of currentTime.  Default for drainDownMode is false.  Default for drainDownTime is zero.
;doMeshMassage  = false ; if doMeshMassage is true the simulation will run a mesh massage algorithm to fix digital pits and similar problems.  This algorithm
                        ; is run once before the simulation starts.  Output that is written will contain the changes that are performed by the mesh massage
                        ; algorithm so further simulation runs using those files as input do not need the mesh massage algorithm run again.  The current
                        ; implementation of the mesh massage algorithm is not paralellized.  You may only run on one processor if doMeshMassage is true.
                        ; Default is false.
;verbosityLevel = 2     ; Controls how much to print to the display.  Default is two.  Current verbosity levels are:
                        ;
                        ; 0 - Error messages only.
                        ; 1 - Messages about general simulation progress.
                        ; 2 - Warning messages about situations that may be a problem.
                        ; 3 - Messages that would be in levels 1 or 2, but they print too much text
                        ; 4 - Warning messages about situations that are probably ok.
