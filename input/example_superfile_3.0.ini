; ADHydro needs several input files to initialize.  The following entries specify the locations of those files.  The code uses the individual file paths
; to find the files, but if the individual file paths are not specified they default to the default filenames located in the corresponding directory path.
; If a directory path is not specified it defaults to the current directory.

; The net effect of this is that if all of the files in a group are in the same directory with the default filenames you can just specify the directory path
; and leave the file paths commented out.  Otherwise, you can specify the location of one or more files individually and that overrides the directory
; path for only the files that you specify so you can use the directory path with default filenames for some files and not others.

; Noah-MP requires some parameter files.
;noahMPDirectoryPath     = ../HRLDAS-v3.6/Run              ; Default is ".".
;noahMPMpTableFilePath   = ../HRLDAS-v3.6/Run/MPTABLE.TBL  ; Default is "noahMPDirectoryPath/MPTABLE.TBL".
;noahMPVegParmFilePath   = ../HRLDAS-v3.6/Run/VEGPARM.TBL  ; Default is "noahMPDirectoryPath/VEGPARM.TBL".
;noahMPSoilParmFilePath  = ../HRLDAS-v3.6/Run/SOILPARM.TBL ; Default is "noahMPDirectoryPath/SOILPARM.TBL".
;noahMPGenParmFilePath   = ../HRLDAS-v3.6/Run/GENPARM.TBL  ; Default is "noahMPDirectoryPath/GENPARM.TBL".

; ADHydro reads the simulation map and forcing data from NetCDF files.
;adhydroInputDirectoryPath   = .            ; Default is ".".
;adhydroInputForcingFilePath = ./forcing.nc ; Default is "adhydroInputDirectoryPath/forcing.nc".

; Dates and times in ADHydro are managed by having a reference date specified as a Julian date plus time points specified as a number of seconds after the reference date.
; A Julian date specifies a date and time as the number of days, including fractional day, since noon, January 1, 4713 BCE.
; Julian dates are always in the UTC time zone.  There are freely available utilities for converting Julian dates to year, month, day, hour, minute, second.
; A time point is a value in seconds interpreted as that number of seconds after the reference date (or before the refence date for negative numbers).
; To get the Julian date for a time point, convert the time point value from seconds to days and add it to the reference date.
; For example, the start of the simulation is at reference date + (simulationStartTime / (60.0 * 60.0 * 24.0)).
; The reference date and time points are stored as doubles in the software.
; The functions currently used by ADHydro for converting Julian dates to year, month, day, hour, minute, second do not work correctly for dates before 1 CE.
; Therefore it is an error for the reference date, or the Julian date of any time point, to be before 1 CE, which is a Julian date of 1721425.5.
;referenceDateJulian     = 2451544.5 ; If referenceDateJulian is specified it takes precedence and the reference date is set to that value.
                                     ; Otherwise, if referenceDateYear, Month, Day, Hour, Minute, Second are all specified and within valid ranges,
                                     ; then the reference date is set to the Julian date value corresponding to that date and time.
                                     ; It is an error for some of referenceDateYear, Month, Day, Hour, Minute, Second to be specified, but not all specified and within valid ranges.
                                     ; If referenceDateDay doesn't exist for referenceDateMonth ADHydro doesn't report an error.  Instead, it rolls over to the next month.
                                     ; For example, referenceDateMonth=4, referenceDateDay=31 is the same as referenceDateMonth=5, referenceDateDay=1.
;referenceDateYear       = 2000      ; Valid range: 1   <= referenceDateYear
;referenceDateMonth      = 1         ; Valid range: 1   <= referenceDateMonth  <= 12
;referenceDateDay        = 1         ; Valid range: 1   <= referenceDateDay    <= 31
;referenceDateHour       = 0         ; Valid range: 0   <= referenceDateHour   <= 23
;referenceDateMinute     = 0         ; Valid range: 0   <= referenceDateMinute <= 59
;referenceDateSecond     = 0.0       ; Valid range: 0.0 <= referenceDateSecond <  60.0
                                     ; If neither of referenceDateJulian or referenceDateYear, Month, Day, Hour, Minute, Second are specified, then the default is the value in the input files.
;simulationStartTime     = 0.0       ; Time point of the start of the simulation.  Default is the value of currentTime in the input files.
                                     ; If a value for simulationStartTime is specified here instead of using the default value from the input files,
                                     ; then zeroExpirationTime is automatically set to true because the existing expiration times will be invalid for the new currentTime.
;simulationDuration      = 1.0       ; The simulation will run for this many simulated seconds.  There is no default value.  A positive value must be specified.
                                     ; The time point at the end of the simulation is simulationStartTime + simulationDuration.
;checkpointPeriod        = INFINITY  ; Period in simulated seconds between checkpoint events.  There is always a checkpoint at the end of the simulation even if it is not on
                                     ; a multiple of checkpointPeriod.  Default is infinity meaning the simulation will only checkpoint once at the end of the simulation.
;checkpointGroupSize     = 1         ; The number of checkpoints that are accumulated and outputed at the same time.  Default is one.  Zero is treated as one.
                                     ; A larger number here can avoid some output overhead.
;checkpointDirectoryPath = .         ; Directory where checkpoint files will be written.  Default is ".".

; The following entries specify special simulation operating modes.

;drainDownMode      = false ; If drainDownMode is true, water level in channels will be capped at bank full.  Any excess will be discarded and accounted for as a negative value in surfaceWaterCreated.
                            ; The purpose of this is a special mode to generate realistic initial conditions starting from an overly wet state.  Default is false.
;zeroExpirationTime = false ; If zeroExpirationTime is true the expiration times of all flow rates will be set to expire immediately, and new flow rates for
                            ; all pairs of neighbors will be calculated at the beginning of the simulation.  This will also occur if simulationStartTime is specified
                            ; in the superfile instead of using the value from the input files.  Default is false.
;zeroCumulativeFlow = false ; If zeroCumulativeFlow is true all accumulators for cumulative flows will be set to zero at the beginning of the simulation.  Default is false.
;zeroWaterCreated   = false ; If zeroWaterCreated is true all accumulators for water created will be set to zero at the beginning of the simulation.  Default is false.
;verbosityLevel     = 2     ; Controls how much to print to the display.  Default is two.  Current verbosity levels are:
                            ;
                            ; 0 - Error messages only.
                            ; 1 - Messages about general simulation progress.
                            ; 2 - Warning messages about situations that may be a problem.
                            ; 3 - Messages that would be in levels 1 or 2, but they print too much text.
                            ; 4 - Warning messages about situations that are probably ok.
