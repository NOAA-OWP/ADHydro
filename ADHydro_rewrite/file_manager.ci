module file_manager
{
  group FileManager
  {
    entry [reductiontarget] void printOutMassBalance(double waterInDomain, double externalFlows, double waterError);
    
    entry FileManager();
    
    // Dummy function for structured dagger infinite loop.
    entry void runUntilSimulationEnd()
    {
      serial
      {
        // Initialize Noah-MP.
        evapoTranspirationInit(ADHydro::evapoTranspirationInitMpTableFilePath.c_str(),  ADHydro::evapoTranspirationInitVegParmFilePath.c_str(),
                               ADHydro::evapoTranspirationInitSoilParmFilePath.c_str(), ADHydro::evapoTranspirationInitGenParmFilePath.c_str());
        
        // Read input files.
        if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
          {
            CkPrintf("Reading input files.\n");
          }
        
        if (ADHydro::initializeFromASCIIFiles)
          {
            initializeFromASCIIFiles();
          }
        else
          {
            initializeFromNetCDFFiles();
          }
        
        // Calculating derived values may require getting vertex data from other file managers.  If it is not required allVerticesUpdated will immediately
        // return true.
        updateVertices();
      }
      
      while (!allVerticesUpdated())
      {
        case
        {
          when meshVertexDataMessage(int node, double x, double y, double zSurface)
          {
            serial
            {
              handleMeshVertexDataMessage(node, x, y, zSurface);
            }
          }
          
          when channelVertexDataMessage(int node, double x, double y, double zBank)
          {
            serial
            {
              handleChannelVertexDataMessage(node, x, y, zBank);
            }
          }
        }
      }
      
      serial
      {
        // Then the file manager must calculate derived values.
        calculateDerivedValues();
        
        if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
          {
            CkPrintf("Finished reading input files.\n");
          }
        
        // File manager 0 creates the region array, sets up its default reduction client, and sends its proxy out to all of the file managers.
        if (0 == CkMyPe())
          {
#if (DEBUG_LEVEL & DEBUG_LEVEL_USER_INPUT_SIMPLE)
            if (!(0 < globalNumberOfRegions))
              {
                CkError("ERROR in FileManager::runUntilSimulationEnd: globalNumberOfRegions must be greater than zero.\n");
                CkExit();
              }
#endif // (DEBUG_LEVEL & DEBUG_LEVEL_USER_INPUT_SIMPLE)
            
            ADHydro::regionProxy = CProxy_Region::ckNew(ADHydro::referenceDate, ADHydro::currentTime, ADHydro::currentTime + ADHydro::simulationDuration,
                                                        globalNumberOfRegions);
            
            ADHydro::regionProxy.ckSetReductionClient(new CkCallback(CkReductionTarget(FileManager, printOutMassBalance), thisProxy[0]));
            
            thisProxy.sendInitializationMessages(ADHydro::regionProxy);
          }
      }
      
      // Send out messages to initialize all elements.
      when sendInitializationMessages(CProxy_Region regionProxy)
      {
        serial
        {
          handleSendInitializationMessages(regionProxy);
        }
      }
      
      // FIXME receive state updates and output to file until simulation is finished.
      serial
      {
        // Write output files.
        if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
          {
            CkPrintf("Writing output files.\n");
          }
        
        writeNetCDFFiles();
        
        if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
          {
            CkPrintf("Finished writing output files.\n");
          }
      }
    }; // End entry void runUntilSimulationEnd().
    
    entry void getMeshVertexDataMessage(int requester, int node);
    entry void getChannelVertexDataMessage(int requester, int node);
    entry void meshVertexDataMessage(int node, double x, double y, double zSurface);
    entry void channelVertexDataMessage(int node, double x, double y, double zBank);
    entry void sendInitializationMessages(CProxy_Region regionProxy);
  }; // End group FileManager.
}; // End module file_manager.
