module region
{
  array [1D] Region
  {
    entry void runUntilSimulationEnd()
    {
      // FIXME do initialization.
      
      while (currentTime < simulationEndTime)
      {
        // Step 1: Calculate nominal flow rates with neighbors.
        serial
        {
          initiateNominalFlowRateCalculation();
        }
        
        // Receive state messages until all external nominal flow rates are calculated.
        while (NEED_TO_CALCULATE_EXTERNAL_NOMINAL_FLOW_RATES == stateMachineState)
        {
          when sendStateMessages(double senderCurrentTime, std::vector<RegionMessageStruct> stateMessages)
          {
            serial
            {
              processStateMessages(senderCurrentTime, stateMessages);
            }
          }
        }
        
        // Finish step 1 by calculating internal nominal flow rates.
        // Step 2: Select timestep.
        // Step 3: Send outflows of material to neighbors.
        serial
        {
          completeNominalFlowRateCalculationSelectTimestepDoPointProcessesAndSendOutflows();
        }
        
        // Step 4: Receive inflows of material from neighbors.
        while (NEED_TO_RECEIVE_INFLOWS == stateMachineState)
        {
          when sendWaterMessages(std::vector<RegionMessageStruct> waterMessages)
          {
            serial
            {
              processWaterMessages(waterMessages);
            }
          }
        }
        
        // Finish step 4 by moving water from incoming material lists to element state variables.
        // Step 5: Advance time.
        serial
        {
          receiveInflowsAndAdvanceTime();
        }
        
        // FIXME do output.
      } // End while (currentTime < simulationEndTime).
      
      serial
      {
        contribute();
      }
    }; // End entry void runUntilSimulationEnd();
    
    entry void sendStateMessages(double senderCurrentTime, std::vector<RegionMessageStruct> stateMessages);
    entry void sendWaterMessages(std::vector<RegionMessageStruct> waterMessages);
  }; // End array [1D] Region.
}; // End module region.
