module mesh_element
{
  array [1D] MeshElement
  {
    entry MeshElement();
    
    entry void sendInitialize(double vertexXInit[3], double vertexYInit[3], double vertexZSurfaceInit[3], double vertexZBedrockInit[3],
                              int neighborInit[3], InteractionEnum interactionInit[3], int catchmentInit, double conductivityInit, double porosityInit,
                              double manningsNInit, double surfacewaterDepthInit, double surfacewaterErrorInit, double groundwaterHeadInit,
                              double groundwaterErrorInit, double groundwaterRechargeInit)
    {
      serial
      {
        receiveInitialize(vertexXInit, vertexYInit, vertexZSurfaceInit, vertexZBedrockInit, neighborInit, interactionInit, catchmentInit, conductivityInit,
                          porosityInit, manningsNInit, surfacewaterDepthInit, surfacewaterErrorInit, groundwaterHeadInit, groundwaterErrorInit,
                          groundwaterRechargeInit);
      }
      
      while (!neighborInitialized[0] || !neighborInitialized[1] || !neighborInitialized[2])
      {
        when sendInitializeNeighbor(int neighborIndex, int neighborEdge, double neighborElementX, double neighborElementY,
                                    double neighborElementZSurface, double neighborElementZBedrock, double neighborElementConductivity,
                                    double neighborElementManningsN)
        {
          serial
          {
            receiveInitializeNeighbor(neighborIndex, neighborEdge, neighborElementX, neighborElementY, neighborElementZSurface, neighborElementZBedrock,
                                      neighborElementConductivity, neighborElementManningsN);
          }
        }
      }
      
      overlap
      {
        while (true)
        {
          when sendDoTimestep(int iterationThisTimestep, double dtThisTimestep)
          {
            serial
            {
              receiveDoTimestep(iterationThisTimestep, dtThisTimestep);
            }

            while (!timestepDone)
            {
              case
              {
                when sendCalculateBoundaryConditionFlowRate[iteration](int iterationThisMessage)
                {
                  serial
                  {
                    receiveCalculateBoundaryConditionFlowRate();
                  }
                }

                when sendState[iteration](int iterationThisMessage, int edge, double neighborSurfacewaterDepth, double neighborGroundwaterHead)
                {
                  serial
                  {
                    receiveState(edge, neighborSurfacewaterDepth, neighborGroundwaterHead);
                  }
                }

                when sendFlowRate[iteration](int iterationThisMessage, int edge, double edgeSurfacewaterFlowRate, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    receiveFlowRate(edge, edgeSurfacewaterFlowRate, edgeGroundwaterFlowRate);
                  }
                }

                when sendSurfacewaterFlowRateLimited[iteration](int iterationThisMessage, int edge, double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    receiveSurfacewaterFlowRateLimited(edge, edgeSurfacewaterFlowRate);
                  }
                }
              }
            }
          }
        }

        while (true)
        {
          case
          {
            when sendCheckInvariant()
            {
              serial
              {
                receiveCheckInvariant();
              }
            }

            when sendCheckInvariantNeighbor(int neighborIndex, int neighborEdge, int neighborsNeighborReciprocalEdge, double neighborVertexX1,
                                            double neighborVertexX2, double neighborVertexY1, double neighborVertexY2, double neighborVertexZSurface1,
                                            double neighborVertexZSurface2, double neighborVertexZBedrock1, double neighborVertexZBedrock2,
                                            InteractionEnum neighborInteraction, double neighborElementX, double neighborElementY,
                                            double neighborElementZSurface, double neighborElementZBedrock, double neighborElementConductivity,
                                            double neighborElementManningsN)
            {
              serial
              {
                receiveCheckInvariantNeighbor(neighborIndex, neighborEdge, neighborsNeighborReciprocalEdge, neighborVertexX1, neighborVertexX2,
                                              neighborVertexY1, neighborVertexY2, neighborVertexZSurface1, neighborVertexZSurface2, neighborVertexZBedrock1,
                                              neighborVertexZBedrock2, neighborInteraction, neighborElementX, neighborElementY, neighborElementZSurface,
                                              neighborElementZBedrock, neighborElementConductivity, neighborElementManningsN);
              }
            }
          }
        }
      }
    };

    entry void sendInitializeNeighbor(int neighborIndex, int neighborEdge, double neighborElementX, double neighborElementY,
                                      double neighborElementZSurface, double neighborElementZBedrock, double neighborElementConductivity,
                                      double neighborElementManningsN);
    entry void sendDoTimestep(int iterationThisTimestep, double dtThisTimestep);
    entry void sendCalculateBoundaryConditionFlowRate(int iterationThisMessage);
    entry void sendState(int iterationThisMessage, int edge, double neighborSurfacewaterDepth, double neighborGroundwaterHead);
    entry void sendFlowRate(int iterationThisMessage, int edge, double edgeSurfacewaterFlowRate, double edgeGroundwaterFlowRate);
    entry void sendSurfacewaterFlowRateLimited(int iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void sendCheckInvariant();
    entry void sendCheckInvariantNeighbor(int neighborIndex, int neighborEdge, int neighborsNeighborReciprocalEdge, double neighborVertexX1,
                                          double neighborVertexX2, double neighborVertexY1, double neighborVertexY2, double neighborVertexZSurface1,
                                          double neighborVertexZSurface2, double neighborVertexZBedrock1, double neighborVertexZBedrock2,
                                          InteractionEnum neighborInteraction, double neighborElementX, double neighborElementY,
                                          double neighborElementZSurface, double neighborElementZBedrock, double neighborElementConductivity,
                                          double neighborElementManningsN);
  };
};
