module mesh_element
{
  array [1D] MeshElement
  {
    entry MeshElement();
    
    // Dummy function for structured dagger infinite loop.
    entry void runForever()
    {
      // The element must receive an initialization message first.
      when initialize(CProxy_ChannelElement channelProxyInit, CProxy_FileManager fileManagerProxyInit)
      {
        serial
        {
          handleInitialize(channelProxyInit, fileManagerProxyInit);
        }
      }
      
      // Then the element must receive initialization messages from all neighbors.
      while(!allInitialized())
      {
        case
        {
          when initializeMeshNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZSurface,
                                      double neighborZBedrock, double neighborArea, double neighborConductivity, double neighborManningsN)
          {
            serial
            {
              handleInitializeMeshNeighbor(neighbor, neighborReciprocalEdge, neighborX, neighborY, neighborZSurface, neighborZBedrock, neighborArea,
                                           neighborConductivity, neighborManningsN);
            }
          }
          
          when initializeChannelNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZBank,
                                         double neighborZBed, double neighborBaseWidth, double neighborSideSlope, double neighborBedConductivity,
                                         double neighborBedThickness)
          {
            serial
            {
              handleInitializeChannelNeighbor(neighbor, neighborReciprocalEdge, neighborX, neighborY, neighborZBank, neighborZBed, neighborBaseWidth,
                                              neighborSideSlope, neighborBedConductivity, neighborBedThickness);
            }
          }
        }
      }
      
      // Then the element must receive one forcing data message as part of initialization.
      when forcingDataMessage(double atmosphereLayerThicknessNew, double shadedFractionNew, double shadedFractionMaximumNew, double surfaceTemperatureNew,
                              double surfacePressureNew, double atomsphereLayerPressureNew, double eastWindSpeedNew, double northWindSpeedNew,
                              double atmosphereLayerMixingRatioNew, double cloudMixingRatioNew, double shortWaveRadiationDownNew,
                              double longWaveRadiationDownNew, double precipitationRateNew, double soilBottomTemperatureNew,
                              double planetaryBoundaryLayerHeightNew)
      {
        serial
        {
          handleForcingDataMessage(atmosphereLayerThicknessNew, shadedFractionNew, shadedFractionMaximumNew, surfaceTemperatureNew, surfacePressureNew,
                                   atomsphereLayerPressureNew, eastWindSpeedNew, northWindSpeedNew, atmosphereLayerMixingRatioNew, cloudMixingRatioNew,
                                   shortWaveRadiationDownNew, longWaveRadiationDownNew, precipitationRateNew, soilBottomTemperatureNew,
                                   planetaryBoundaryLayerHeightNew);
        }
      }
      
      while(true)
      {
        case
        {
          // After receiving an initial forcing data message new forcing data messages can optionally arrive between timesteps.
          when forcingDataMessage(double atmosphereLayerThicknessNew, double shadedFractionNew, double shadedFractionMaximumNew, double surfaceTemperatureNew,
                                  double surfacePressureNew, double atomsphereLayerPressureNew, double eastWindSpeedNew, double northWindSpeedNew,
                                  double atmosphereLayerMixingRatioNew, double cloudMixingRatioNew, double shortWaveRadiationDownNew,
                                  double longWaveRadiationDownNew, double precipitationRateNew, double soilBottomTemperatureNew,
                                  double planetaryBoundaryLayerHeightNew)
          {
            serial
            {
              handleForcingDataMessage(atmosphereLayerThicknessNew, shadedFractionNew, shadedFractionMaximumNew, surfaceTemperatureNew, surfacePressureNew,
                                       atomsphereLayerPressureNew, eastWindSpeedNew, northWindSpeedNew, atmosphereLayerMixingRatioNew, cloudMixingRatioNew,
                                       shortWaveRadiationDownNew, longWaveRadiationDownNew, precipitationRateNew, soilBottomTemperatureNew,
                                       planetaryBoundaryLayerHeightNew);
            }
          }
          
          // When the element receives a doTimestep message it starts the rounds of messages to calculate groundwater and surfacewater movement.
          // FIXME document communication pattern here.
          when doTimestep(CMK_REFNUM_TYPE iterationThisTimestep, double dtThisTimestep)
          {
            serial
            {
              handleDoTimestep(iterationThisTimestep, dtThisTimestep);
            }
            
            while (!groundwaterDone)
            {
              case
              {
                when calculateGroundwaterBoundaryConditionsMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage)
                {
                  serial
                  {
                    handleCalculateGroundwaterBoundaryConditionsMessage(iterationThisMessage);
                  }
                }
                
                // Calculate groundwater boundary conditions messages also calculate infiltration, which is needed for every mesh element, so they can never be
                // unneeded so no need to discard stale messages.
                
                when meshGroundwaterStateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                        double neighborGroundwaterHead)
                {
                  serial
                  {
                    handleMeshGroundwaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth, neighborGroundwaterHead);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshGroundwaterStateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                            double neighborGroundwaterHead)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshGroundwaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshGroundwaterStateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                            double neighborGroundwaterHead)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshGroundwaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshGroundwaterStateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                            double neighborGroundwaterHead)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshGroundwaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelGroundwaterStateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    handleChannelGroundwaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelGroundwaterStateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                               double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelGroundwaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelGroundwaterStateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                               double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelGroundwaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelGroundwaterStateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                               double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelGroundwaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshGroundwaterFlowRateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleMeshGroundwaterFlowRateMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshGroundwaterFlowRateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshGroundwaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshGroundwaterFlowRateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshGroundwaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshGroundwaterFlowRateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshGroundwaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelGroundwaterFlowRateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleChannelGroundwaterFlowRateMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelGroundwaterFlowRateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelGroundwaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelGroundwaterFlowRateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelGroundwaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelGroundwaterFlowRateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelGroundwaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshGroundwaterFlowRateLimitedMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleMeshGroundwaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
                
                when channelGroundwaterFlowRateLimitedMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                     double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleChannelGroundwaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
              } // End case within while (!groundwaterDone).
            } // End while (!groundwaterDone).
            
            while (!surfacewaterDone)
            {
              case
              {
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage)
                {
                  serial
                  {
                    handleCalculateSurfacewaterBoundaryConditionsMessage(iterationThisMessage);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage)
                {
                  serial
                  {
                    // Any mesh element with no boundary edges will reach this point.  Disable message because it is too verbose.
                    //CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale calculateSurfacewaterBoundaryConditionsMessage "
                    //         "for iteration %d.\n", thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale calculateSurfacewaterBoundaryConditionsMessage "
                             "for iteration %d.\n", thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale calculateSurfacewaterBoundaryConditionsMessage "
                             "for iteration %d.\n", thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterStateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    handleMeshSurfacewaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshSurfacewaterStateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshSurfacewaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterStateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshSurfacewaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterStateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshSurfacewaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelSurfacewaterStateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    handleChannelSurfacewaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelSurfacewaterStateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelSurfacewaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelSurfacewaterStateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelSurfacewaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelSurfacewaterStateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelSurfacewaterStateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleMeshSurfacewaterFlowRateMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshSurfacewaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshSurfacewaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale meshSurfacewaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleChannelSurfacewaterFlowRateMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep - 1](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelSurfacewaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep - 2](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelSurfacewaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep - 3](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    CkPrintf("NOTE: mesh element %d, iteration %d: Discarding unneeded stale channelSurfacewaterFlowRateMessage for iteration %d.\n",
                             thisIndex, iterationThisTimestep, iterationThisMessage);
                  }
                }
                
                when meshSurfacewaterFlowRateLimitedMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleMeshSurfacewaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
                
                when channelSurfacewaterFlowRateLimitedMessage[iterationThisTimestep](CMK_REFNUM_TYPE iterationThisMessage, int edge,
                                                                                      double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleChannelSurfacewaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
              } // End case within while (!surfacewaterDone).
            } // End while (!surfacewaterDone).
          } // End when doTimestep(CMK_REFNUM_TYPE iterationThisTimestep, double dtThisTimestep).
          
          // When it is time to output to NetCDF files the element sends its updated state to the file managers.
          when updateState()
          {
            serial
            {
              fileManagerProxy[FileManager::home(thisIndex, fileManagerProxy.ckLocalBranch()->globalNumberOfMeshElements)]
                  .meshStateMessage(thisIndex, surfacewaterDepth, surfacewaterError, groundwaterHead, groundwaterError, precipitationCumulative, evaporationCumulative, evapoTranspirationState.canLiq,
                                     evapoTranspirationState.canIce, evapoTranspirationState.snEqv, meshNeighborsSurfacewaterCumulativeFlow, meshNeighborsGroundwaterCumulativeFlow);
            }
          }
          
          // Checking the invariant involves a round of messages between neighbors.
          when checkInvariant()
          {
            serial
            {
              handleCheckInvariant();
            }
            
            while(!allInvariantChecked())
            {
              case
              {
                when checkMeshNeighborInvariant(int neighbor, int edge, int neighborEdge, bool neighborChannelEdge, InteractionEnum neighborInteraction,
                                                double neighborX, double neighborY, double neighborZSurface, double neighborZBedrock, double neighborArea,
                                                double neighborEdgeLength, double neighborEdgeNormalX, double neighborEdgeNormalY,
                                                double neighborConductivity, double neighborManningsN, double neighborSurfacewaterFlowRate,
                                                double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                                double neighborGroundwaterCumulativeFlow, double neighborDt)
                {
                  serial
                  {
                    handleCheckMeshNeighborInvariant(neighbor, edge, neighborEdge, neighborChannelEdge, neighborInteraction, neighborX, neighborY,
                                                     neighborZSurface, neighborZBedrock, neighborArea, neighborEdgeLength, neighborEdgeNormalX,
                                                     neighborEdgeNormalY, neighborConductivity, neighborManningsN, neighborSurfacewaterFlowRate,
                                                     neighborSurfacewaterCumulativeFlow, neighborGroundwaterFlowRate, neighborGroundwaterCumulativeFlow,
                                                     neighborDt);
                  }
                }
                
                when checkChannelNeighborInvariant(int neighbor, int edge, int neighborEdge, InteractionEnum neighborInteraction, double neighborX,
                                                   double neighborY, double neighborZBank, double neighborZBed, double neighborZOffset,
                                                   double neighborEdgeLength, double neighborBaseWidth, double neighborSideSlope,
                                                   double neighborBedConductivity, double neighborBedThickness, double neighborSurfacewaterFlowRate,
                                                   double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                                   double neighborGroundwaterCumulativeFlow, double neighborDt)
                {
                  serial
                  {
                    handleCheckChannelNeighborInvariant(neighbor, edge, neighborEdge, neighborInteraction, neighborX, neighborY, neighborZBank, neighborZBed,
                                                        neighborZOffset, neighborEdgeLength, neighborBaseWidth, neighborSideSlope, neighborBedConductivity,
                                                        neighborBedThickness, neighborSurfacewaterFlowRate, neighborSurfacewaterCumulativeFlow,
                                                        neighborGroundwaterFlowRate, neighborGroundwaterCumulativeFlow, neighborDt);
                  }
                }
              } // End case within while(!allNeighborInvariantChecked())
            } // End while(!allNeighborInvariantChecked())
            
            serial
            {
              contribute();
            }
          } // End when checkInvariant()
        } // End case within while(true).
      } // End while(true).
    }; // End entry void runForever().
    
    entry void initialize(CProxy_ChannelElement channelProxyInit, CProxy_FileManager fileManagerProxyInit);
    entry void initializeMeshNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZSurface,
                                      double neighborZBedrock, double neighborArea, double neighborConductivity, double neighborManningsN);
    entry void initializeChannelNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZBank,
                                         double neighborZBed, double neighborBaseWidth, double neighborSideSlope, double neighborBedConductivity,
                                         double neighborBedThickness);
    entry void forcingDataMessage(double atmosphereLayerThicknessNew, double shadedFractionNew, double shadedFractionMaximumNew, double surfaceTemperatureNew,
                                  double surfacePressureNew, double atomsphereLayerPressureNew, double eastWindSpeedNew, double northWindSpeedNew,
                                  double atmosphereLayerMixingRatioNew, double cloudMixingRatioNew, double shortWaveRadiationDownNew,
                                  double longWaveRadiationDownNew, double precipitationRateNew, double soilBottomTemperatureNew,
                                  double planetaryBoundaryLayerHeightNew);
    entry void doTimestep(CMK_REFNUM_TYPE iterationThisTimestep, double dtThisTimestep);
    entry void calculateGroundwaterBoundaryConditionsMessage(CMK_REFNUM_TYPE iterationThisMessage);
    entry void meshGroundwaterStateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth, double neighborGroundwaterHead);
    entry void channelGroundwaterStateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth);
    entry void meshGroundwaterFlowRateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void channelGroundwaterFlowRateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void meshGroundwaterFlowRateLimitedMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void channelGroundwaterFlowRateLimitedMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void calculateSurfacewaterBoundaryConditionsMessage(CMK_REFNUM_TYPE iterationThisMessage);
    entry void meshSurfacewaterStateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth);
    entry void channelSurfacewaterStateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double neighborSurfacewaterDepth);
    entry void meshSurfacewaterFlowRateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void channelSurfacewaterFlowRateMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void meshSurfacewaterFlowRateLimitedMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void channelSurfacewaterFlowRateLimitedMessage(CMK_REFNUM_TYPE iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void updateState();
    entry void checkInvariant();
    entry void checkMeshNeighborInvariant(int neighbor, int edge, int neighborEdge, bool neighborChannelEdge, InteractionEnum neighborInteraction,
                                          double neighborX, double neighborY, double neighborZSurface, double neighborZBedrock, double neighborArea,
                                          double neighborEdgeLength, double neighborEdgeNormalX, double neighborEdgeNormalY,
                                          double neighborConductivity, double neighborManningsN, double neighborSurfacewaterFlowRate,
                                          double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                          double neighborGroundwaterCumulativeFlow, double neighborDt);
    entry void checkChannelNeighborInvariant(int neighbor, int edge, int neighborEdge, InteractionEnum neighborInteraction, double neighborX,
                                             double neighborY, double neighborZBank, double neighborZBed, double neighborZOffset,
                                             double neighborEdgeLength, double neighborBaseWidth, double neighborSideSlope,
                                             double neighborBedConductivity, double neighborBedThickness, double neighborSurfacewaterFlowRate,
                                             double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                             double neighborGroundwaterCumulativeFlow, double neighborDt);
  }; // End array [1D] MeshElement.
}; // End module mesh_element.
