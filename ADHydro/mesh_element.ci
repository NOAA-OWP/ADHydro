module mesh_element
{
  array [1D] MeshElement
  {
    entry MeshElement();
    
    // Dummy function for structured dagger infinite loop.
    entry void runForever()
    {
      // The element must receive an initialization message first.
      when initialize(CProxy_ChannelElement channelProxyInit, CProxy_FileManager fileManagerProxyInit)
      {
        serial
        {
          handleInitialize(channelProxyInit, fileManagerProxyInit);
        }
      }
      
      // Then the element must receive initialization messages from all neighbors.
      while (!allInitialized())
      {
        case
        {
          when initializeMeshNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZSurface,
                                      double neighborZBedrock, double neighborArea, double neighborConductivity, double neighborManningsN)
          {
            serial
            {
              handleInitializeMeshNeighbor(neighbor, neighborReciprocalEdge, neighborX, neighborY, neighborZSurface, neighborZBedrock, neighborArea,
                                           neighborConductivity, neighborManningsN);
            }
          }
          
          when initializeChannelNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZBank,
                                         double neighborZBed, ChannelTypeEnum neighborChannelType, double neighborBaseWidth, double neighborSideSlope,
                                         double neighborBedConductivity, double neighborBedThickness)
          {
            serial
            {
              handleInitializeChannelNeighbor(neighbor, neighborReciprocalEdge, neighborX, neighborY, neighborZBank, neighborZBed, neighborChannelType,
                                              neighborBaseWidth, neighborSideSlope, neighborBedConductivity, neighborBedThickness);
            }
          }
        }
      }
      
      // Then the element must receive one forcing data message as part of initialization.
      when forcingDataMessage(float atmosphereLayerThicknessNew, float shadedFractionNew, float shadedFractionMaximumNew, float surfaceTemperatureNew,
                              float surfacePressureNew, float atomsphereLayerPressureNew, float eastWindSpeedNew, float northWindSpeedNew,
                              float atmosphereLayerMixingRatioNew, float cloudMixingRatioNew, float shortWaveRadiationDownNew,
                              float longWaveRadiationDownNew, float precipitationRateNew, float soilBottomTemperatureNew,
                              float planetaryBoundaryLayerHeightNew)
      {
        serial
        {
          handleForcingDataMessage(atmosphereLayerThicknessNew, shadedFractionNew, shadedFractionMaximumNew, surfaceTemperatureNew, surfacePressureNew,
                                   atomsphereLayerPressureNew, eastWindSpeedNew, northWindSpeedNew, atmosphereLayerMixingRatioNew, cloudMixingRatioNew,
                                   shortWaveRadiationDownNew, longWaveRadiationDownNew, precipitationRateNew, soilBottomTemperatureNew,
                                   planetaryBoundaryLayerHeightNew);
        }
      }
      
      while (true)
      {
        case
        {
          // There is a case where if the reciprocal neighbor links in the input files are broken the simulation can hang before getting to the invariant where
          // the reciprocal links are checked.  We need this here to handle that case.  The case is A thinks B is his neighbor, but B doesn't think A is his
          // neighbor.  A sends an initialize neighbor message to B and waits for an initialize neighbor message from B.  If B receives A's message he will
          // report an error, but B can receive messages from everyone he thinks are his neighbors and exit the initialize neighbor loop before receiving A's
          // message.  In this case, B will never receive A's message to report an error, and A will never contribute to the forcing data done reduction and
          // the program will hang with no error message.  Having this here will allow B to receive A's message and report an error.
          when initializeMeshNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZSurface,
                                      double neighborZBedrock, double neighborArea, double neighborConductivity, double neighborManningsN)
          {
            serial
            {
              CkError("ERROR in MeshElement::initializeMeshNeighbor, element %d: received an initialization message from element %d that is not my "
                      "neighbor.\n", thisIndex, neighbor);
              CkExit();
            }
          }
          
          when initializeChannelNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZBank,
                                         double neighborZBed, ChannelTypeEnum neighborChannelType, double neighborBaseWidth, double neighborSideSlope,
                                         double neighborBedConductivity, double neighborBedThickness)
          {
            serial
            {
              CkError("ERROR in MeshElement::initializeChannelNeighbor, element %d: received an initialization message from element %d that is not my "
                      "neighbor.\n", thisIndex, neighbor);
              CkExit();
            }
          }
          
          // After receiving an initial forcing data message new forcing data messages can optionally arrive between timesteps.
          when forcingDataMessage(float atmosphereLayerThicknessNew, float shadedFractionNew, float shadedFractionMaximumNew, float surfaceTemperatureNew,
                                  float surfacePressureNew, float atomsphereLayerPressureNew, float eastWindSpeedNew, float northWindSpeedNew,
                                  float atmosphereLayerMixingRatioNew, float cloudMixingRatioNew, float shortWaveRadiationDownNew,
                                  float longWaveRadiationDownNew, float precipitationRateNew, float soilBottomTemperatureNew,
                                  float planetaryBoundaryLayerHeightNew)
          {
            serial
            {
              handleForcingDataMessage(atmosphereLayerThicknessNew, shadedFractionNew, shadedFractionMaximumNew, surfaceTemperatureNew, surfacePressureNew,
                                       atomsphereLayerPressureNew, eastWindSpeedNew, northWindSpeedNew, atmosphereLayerMixingRatioNew, cloudMixingRatioNew,
                                       shortWaveRadiationDownNew, longWaveRadiationDownNew, precipitationRateNew, soilBottomTemperatureNew,
                                       planetaryBoundaryLayerHeightNew);
            }
          }
          
          // When the element receives a doTimestep message it starts the rounds of messages to calculate groundwater and surfacewater movement.
          // FIXME document communication pattern here.
          when doTimestep(size_t iterationThisTimestep, double date, double dtThisTimestep)
          {
            serial
            {
              handleDoTimestep(iterationThisTimestep, date, dtThisTimestep);
            }
            
            while (!groundwaterDone)
            {
              case
              {
                when calculateGroundwaterBoundaryConditionsMessage[iterationThisTimestep](size_t iterationThisMessage)
                {
                  serial
                  {
                    handleCalculateGroundwaterBoundaryConditionsMessage(iterationThisMessage);
                  }
                }
                
                // Calculate groundwater boundary conditions messages also calculate infiltration, which is needed for every mesh element, so they can never be
                // unneeded so no need to discard stale messages.
                
                when meshGroundwaterStateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                        double neighborGroundwaterHead)
                {
                  serial
                  {
                    handleMeshGroundwaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth, neighborGroundwaterHead);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshGroundwaterStateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                            double neighborGroundwaterHead)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshGroundwaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshGroundwaterStateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                            double neighborGroundwaterHead)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshGroundwaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshGroundwaterStateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth,
                                                                            double neighborGroundwaterHead)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshGroundwaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelGroundwaterStateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    handleChannelGroundwaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelGroundwaterStateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge,
                                                                               double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelGroundwaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelGroundwaterStateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge,
                                                                               double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelGroundwaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelGroundwaterStateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge,
                                                                               double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelGroundwaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshGroundwaterFlowRateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleMeshGroundwaterFlowRateMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshGroundwaterFlowRateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshGroundwaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshGroundwaterFlowRateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshGroundwaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshGroundwaterFlowRateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshGroundwaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelGroundwaterFlowRateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleChannelGroundwaterFlowRateMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelGroundwaterFlowRateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelGroundwaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelGroundwaterFlowRateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelGroundwaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelGroundwaterFlowRateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelGroundwaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshGroundwaterFlowRateLimitedMessage[iterationThisTimestep](size_t iterationThisMessage, int edge,
                                                                                  double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleMeshGroundwaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
                
                when channelGroundwaterFlowRateLimitedMessage[iterationThisTimestep](size_t iterationThisMessage, int edge,
                                                                                     double edgeGroundwaterFlowRate)
                {
                  serial
                  {
                    handleChannelGroundwaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeGroundwaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
              } // End case within while (!groundwaterDone).
            } // End while (!groundwaterDone).
            
            while (!surfacewaterDone)
            {
              case
              {
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep](size_t iterationThisMessage)
                {
                  serial
                  {
                    handleCalculateSurfacewaterBoundaryConditionsMessage(iterationThisMessage);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep - 1](size_t iterationThisMessage)
                {
                  serial
                  {
                    // This will occur all of the time for any element with no boundary edges so use verbosity level 4.
                    if (4 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale calculateSurfacewaterBoundaryConditionsMessage "
                              "for iteration %lu.\n", thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep - 2](size_t iterationThisMessage)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale calculateSurfacewaterBoundaryConditionsMessage "
                              "for iteration %lu.\n", thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when calculateSurfacewaterBoundaryConditionsMessage[iterationThisTimestep - 3](size_t iterationThisMessage)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale calculateSurfacewaterBoundaryConditionsMessage "
                              "for iteration %lu.\n", thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterStateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    handleMeshSurfacewaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshSurfacewaterStateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshSurfacewaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterStateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshSurfacewaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterStateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshSurfacewaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelSurfacewaterStateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    handleChannelSurfacewaterStateMessage(iterationThisMessage, edge, neighborSurfacewaterDepth);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelSurfacewaterStateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge,
                                                                                double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelSurfacewaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelSurfacewaterStateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge,
                                                                                double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelSurfacewaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelSurfacewaterStateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge,
                                                                                double neighborSurfacewaterDepth)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelSurfacewaterStateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleMeshSurfacewaterFlowRateMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge,
                                                                                double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshSurfacewaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge,
                                                                                double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshSurfacewaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterFlowRateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge,
                                                                                double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale meshSurfacewaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep](size_t iterationThisMessage, int edge, double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleChannelSurfacewaterFlowRateMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Discard unneeded stale messages.  There is no way to receive messages whose reference number is not equal to a given number so instead we
                // receive any message whose reference number is equal to the past three timesteps.
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep - 1](size_t iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelSurfacewaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep - 2](size_t iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelSurfacewaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when channelSurfacewaterFlowRateMessage[iterationThisTimestep - 3](size_t iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    if (2 <= ADHydro::verbosityLevel)
                    {
                      CkError("NOTE: mesh element %d, iteration %lu: Discarding unneeded stale channelSurfacewaterFlowRateMessage for iteration %lu.\n",
                              thisIndex, iterationThisTimestep, iterationThisMessage);
                    }
                  }
                }
                
                when meshSurfacewaterFlowRateLimitedMessage[iterationThisTimestep](size_t iterationThisMessage, int edge,
                                                                                   double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleMeshSurfacewaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
                
                when channelSurfacewaterFlowRateLimitedMessage[iterationThisTimestep](size_t iterationThisMessage, int edge,
                                                                                      double edgeSurfacewaterFlowRate)
                {
                  serial
                  {
                    handleChannelSurfacewaterFlowRateLimitedMessage(iterationThisMessage, edge, edgeSurfacewaterFlowRate);
                  }
                }
                
                // Flow rate limited messages can never be unneeded so no need to discard stale messages.
              } // End case within while (!surfacewaterDone).
            } // End while (!surfacewaterDone).
          } // End when doTimestep(size_t iterationThisTimestep, double dtThisTimestep).
          
          // When it is time to output to NetCDF files the element sends its updated state to the file managers.
          when updateState()
          {
            serial
            {
              int ii; // Loop counter.
              
              fileManagerProxy[FileManager::home(thisIndex, fileManagerProxy.ckLocalBranch()->globalNumberOfMeshElements)]
                  .meshStateMessage(thisIndex, surfacewaterDepth, surfacewaterError, groundwaterHead, groundwaterError, precipitation, precipitationCumulative,
                                    evaporation, evaporationCumulative, surfacewaterInfiltration, groundwaterRecharge, evapoTranspirationState,
                                    meshNeighborsSurfacewaterFlowRate, meshNeighborsSurfacewaterCumulativeFlow, meshNeighborsGroundwaterFlowRate,
                                    meshNeighborsGroundwaterCumulativeFlow, channelNeighborsSurfacewaterFlowRate, channelNeighborsSurfacewaterCumulativeFlow,
                                    channelNeighborsGroundwaterFlowRate, channelNeighborsGroundwaterCumulativeFlow);
              
              // Zero out cumulative values on output.
              precipitationCumulative = 0.0;
              evaporationCumulative   = 0.0;
              
              for (ii = 0; ii < meshNeighborsSize; ii++)
              {
                meshNeighborsSurfacewaterCumulativeFlow[ii] = 0.0;
                meshNeighborsGroundwaterCumulativeFlow[ii]  = 0.0;
              }
              
              for (ii = 0; ii < channelNeighborsSize; ii++)
              {
                channelNeighborsSurfacewaterCumulativeFlow[ii] = 0.0;
                channelNeighborsGroundwaterCumulativeFlow[ii]  = 0.0;
              }
            }
          }
          
          // Checking the invariant involves a round of messages between neighbors.
          when checkInvariant()
          {
            serial
            {
              handleCheckInvariant();
            }
            
            while (!allInvariantChecked())
            {
              case
              {
                when checkMeshNeighborInvariant(int neighbor, int edge, int neighborEdge, bool neighborChannelEdge, InteractionEnum neighborInteraction,
                                                double neighborX, double neighborY, double neighborZSurface, double neighborZBedrock, double neighborArea,
                                                double neighborEdgeLength, double neighborEdgeNormalX, double neighborEdgeNormalY,
                                                double neighborConductivity, double neighborManningsN, double neighborSurfacewaterFlowRate,
                                                double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                                double neighborGroundwaterCumulativeFlow, double neighborDt)
                {
                  serial
                  {
                    handleCheckMeshNeighborInvariant(neighbor, edge, neighborEdge, neighborChannelEdge, neighborInteraction, neighborX, neighborY,
                                                     neighborZSurface, neighborZBedrock, neighborArea, neighborEdgeLength, neighborEdgeNormalX,
                                                     neighborEdgeNormalY, neighborConductivity, neighborManningsN, neighborSurfacewaterFlowRate,
                                                     neighborSurfacewaterCumulativeFlow, neighborGroundwaterFlowRate, neighborGroundwaterCumulativeFlow,
                                                     neighborDt);
                  }
                }
                
                when checkChannelNeighborInvariant(int neighbor, int edge, int neighborEdge, InteractionEnum neighborInteraction, double neighborX,
                                                   double neighborY, double neighborZBank, double neighborZBed, double neighborZOffset,
                                                   double neighborEdgeLength, double neighborBaseWidth, double neighborSideSlope,
                                                   double neighborBedConductivity, double neighborBedThickness, double neighborSurfacewaterFlowRate,
                                                   double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                                   double neighborGroundwaterCumulativeFlow, double neighborDt)
                {
                  serial
                  {
                    handleCheckChannelNeighborInvariant(neighbor, edge, neighborEdge, neighborInteraction, neighborX, neighborY, neighborZBank, neighborZBed,
                                                        neighborZOffset, neighborEdgeLength, neighborBaseWidth, neighborSideSlope, neighborBedConductivity,
                                                        neighborBedThickness, neighborSurfacewaterFlowRate, neighborSurfacewaterCumulativeFlow,
                                                        neighborGroundwaterFlowRate, neighborGroundwaterCumulativeFlow, neighborDt);
                  }
                }
              } // End case within while (!allNeighborInvariantChecked())
            } // End while (!allNeighborInvariantChecked())
            
            serial
            {
              contribute();
            }
          } // End when checkInvariant()
        } // End case within while (true).
      } // End while (true).
    }; // End entry void runForever().
    
    entry void initialize(CProxy_ChannelElement channelProxyInit, CProxy_FileManager fileManagerProxyInit);
    entry void initializeMeshNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZSurface,
                                      double neighborZBedrock, double neighborArea, double neighborConductivity, double neighborManningsN);
    entry void initializeChannelNeighbor(int neighbor, int neighborReciprocalEdge, double neighborX, double neighborY, double neighborZBank,
                                         double neighborZBed, ChannelTypeEnum neighborChannelType, double neighborBaseWidth, double neighborSideSlope,
                                         double neighborBedConductivity, double neighborBedThickness);
    entry void forcingDataMessage(float atmosphereLayerThicknessNew, float shadedFractionNew, float shadedFractionMaximumNew, float surfaceTemperatureNew,
                                  float surfacePressureNew, float atomsphereLayerPressureNew, float eastWindSpeedNew, float northWindSpeedNew,
                                  float atmosphereLayerMixingRatioNew, float cloudMixingRatioNew, float shortWaveRadiationDownNew,
                                  float longWaveRadiationDownNew, float precipitationRateNew, float soilBottomTemperatureNew,
                                  float planetaryBoundaryLayerHeightNew);
    entry void doTimestep(size_t iterationThisTimestep, double date, double dtThisTimestep);
    entry void calculateGroundwaterBoundaryConditionsMessage(size_t iterationThisMessage);
    entry void meshGroundwaterStateMessage(size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth, double neighborGroundwaterHead);
    entry void channelGroundwaterStateMessage(size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth);
    entry void meshGroundwaterFlowRateMessage(size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void channelGroundwaterFlowRateMessage(size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void meshGroundwaterFlowRateLimitedMessage(size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void channelGroundwaterFlowRateLimitedMessage(size_t iterationThisMessage, int edge, double edgeGroundwaterFlowRate);
    entry void calculateSurfacewaterBoundaryConditionsMessage(size_t iterationThisMessage);
    entry void meshSurfacewaterStateMessage(size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth);
    entry void channelSurfacewaterStateMessage(size_t iterationThisMessage, int edge, double neighborSurfacewaterDepth);
    entry void meshSurfacewaterFlowRateMessage(size_t iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void channelSurfacewaterFlowRateMessage(size_t iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void meshSurfacewaterFlowRateLimitedMessage(size_t iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void channelSurfacewaterFlowRateLimitedMessage(size_t iterationThisMessage, int edge, double edgeSurfacewaterFlowRate);
    entry void updateState();
    entry void checkInvariant();
    entry void checkMeshNeighborInvariant(int neighbor, int edge, int neighborEdge, bool neighborChannelEdge, InteractionEnum neighborInteraction,
                                          double neighborX, double neighborY, double neighborZSurface, double neighborZBedrock, double neighborArea,
                                          double neighborEdgeLength, double neighborEdgeNormalX, double neighborEdgeNormalY,
                                          double neighborConductivity, double neighborManningsN, double neighborSurfacewaterFlowRate,
                                          double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                          double neighborGroundwaterCumulativeFlow, double neighborDt);
    entry void checkChannelNeighborInvariant(int neighbor, int edge, int neighborEdge, InteractionEnum neighborInteraction, double neighborX,
                                             double neighborY, double neighborZBank, double neighborZBed, double neighborZOffset,
                                             double neighborEdgeLength, double neighborBaseWidth, double neighborSideSlope,
                                             double neighborBedConductivity, double neighborBedThickness, double neighborSurfacewaterFlowRate,
                                             double neighborSurfacewaterCumulativeFlow, double neighborGroundwaterFlowRate,
                                             double neighborGroundwaterCumulativeFlow, double neighborDt);
  }; // End array [1D] MeshElement.
}; // End module mesh_element.
