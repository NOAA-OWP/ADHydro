module file_manager
{
  group FileManager
  {
    entry [reductiontarget] void printOutMassBalance(double messageTime, double waterInDomain, double externalFlows, double waterError);
    
    entry FileManager();
    
    // Dummy function for structured dagger infinite loop.
    entry void runUntilSimulationEnd()
    {
      serial
      {
        // Initialize Noah-MP.
        evapoTranspirationInit(ADHydro::evapoTranspirationInitMpTableFilePath.c_str(),  ADHydro::evapoTranspirationInitVegParmFilePath.c_str(),
                               ADHydro::evapoTranspirationInitSoilParmFilePath.c_str(), ADHydro::evapoTranspirationInitGenParmFilePath.c_str());
        
        // Read input files.
        if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
          {
            CkPrintf("Reading input files.\n");
          }
        
        if (ADHydro::initializeFromASCIIFiles)
          {
            initializeFromASCIIFiles();
          }
        else
          {
            initializeFromNetCDFFiles();
          }
        
        // Calculating derived values may require getting vertex data from other file managers.  If it is not required allVerticesUpdated will immediately
        // return true.
        updateVertices();
      }
      
      while (!allVerticesUpdated())
      {
        case
        {
          when meshVertexDataMessage(int node, double x, double y, double zSurface)
          {
            serial
            {
              handleMeshVertexDataMessage(node, x, y, zSurface);
            }
          }
          
          when channelVertexDataMessage(int node, double x, double y, double zBank)
          {
            serial
            {
              handleChannelVertexDataMessage(node, x, y, zBank);
            }
          }
        }
      }
      
      serial
      {
        // Then the file manager must calculate derived values.
        calculateDerivedValues();
        
        if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
          {
            CkPrintf("Finished reading input files.\n");
          }
        
        // File manager 0 creates the region array, sets up its default reduction client, and sends its proxy out to all of the file managers.
        if (0 == CkMyPe())
          {
#if (DEBUG_LEVEL & DEBUG_LEVEL_USER_INPUT_SIMPLE)
            if (!(0 < globalNumberOfRegions))
              {
                CkError("ERROR in FileManager::runUntilSimulationEnd: globalNumberOfRegions must be greater than zero.\n");
                CkExit();
              }
#endif // (DEBUG_LEVEL & DEBUG_LEVEL_USER_INPUT_SIMPLE)
            
            // Create the chare array of regions.
            ADHydro::regionProxy = CProxy_Region::ckNew(ADHydro::referenceDate, currentTime, simulationEndTime, globalNumberOfRegions);
            
            // Regions use a reduction to do mass balance.
            ADHydro::regionProxy.ckSetReductionClient(new CkCallback(CkReductionTarget(FileManager, printOutMassBalance), thisProxy[0]));
            
            // File managers use a reduction as a barrier before writing to NetCDF files.
            thisProxy.ckSetReductionClient(new CkCallback(CkReductionTarget(FileManager, barrier), thisProxy));
            
            thisProxy.sendInitializationMessages(ADHydro::regionProxy);
          }
      }
      
      // Send out messages to initialize all elements.
      when sendInitializationMessages(CProxy_Region regionProxy)
      {
        serial
        {
          handleSendInitializationMessages(regionProxy);
        }
      }
      
      // Receive state updates and output to file until simulation is finished.
      while (!simulationFinished)
      {
        // Output simulation state if it is a checkpoint time, output time, the end of the simulation, or the beginning of the simulation.
        // ADHydro::currentTime is never updated so it continues to hold the time at the beginning of the simulation.
        serial
        {
          sdagCondition = (nextCheckpointIndex * ADHydro::checkpointPeriod == currentTime || nextOutputIndex * ADHydro::outputPeriod == currentTime ||
                           simulationEndTime == currentTime || ADHydro::currentTime == currentTime);
        }
        
        if (sdagCondition)
        {
          serial
          {
            // There is a potential deadlock problem that requires a barrier here.  Opening NetCDF files in parallel hits a barrier in the NetCDF library,
            // which waits for all other file managers to hit the barrier.  Because Charm++ is single threaded on each PE, when a file manager enters
            // writeNetCDFFiles and hits that barrier no further Charm++ operations can take place on that PE until all file managers reach the NetCDF barrier.
            // But there may be another file manager that is waiting for a state message from a region that has migrated to that PE, and that message will
            // never be sent because that PE is locked by the file manager waiting at the NetCDF barrier.  The solution is to put a Charm++ barrier
            // (implemented as a reduction) before the NetCDF barrier because the Charm++ barrier is implemented in such a way that other Charm++ operations
            // can continue while a file manager is waiting at the barrier.
            contribute();
          }
          
          when barrier()
          {
            serial
            {
              // Write output files.
              if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
                {
                  long   simulationYear;   // For calculating Gregorian date from Julian date.
                  long   simulationMonth;  // For calculating Gregorian date from Julian date.
                  long   simulationDay;    // For calculating Gregorian date from Julian date.
                  long   simulationHour;   // For calculating Gregorian date from Julian date.
                  long   simulationMinute; // For calculating Gregorian date from Julian date.
                  double simulationSecond; // For calculating Gregorian date from Julian date.
                  
                  julianToGregorian(ADHydro::referenceDate + currentTime / (24.0 * 3600.0), &simulationYear, &simulationMonth, &simulationDay, &simulationHour,
                                    &simulationMinute, &simulationSecond);
                  
                  CkPrintf("Writing output files for simulation time %.0lf, date %02d/%02d/%04d %02d:%02d:%02.0lf UTC.\n", currentTime, simulationMonth,
                           simulationDay, simulationYear, simulationHour, simulationMinute, simulationSecond);
                }
              
              writeNetCDFFiles();
              
              if (0 == CkMyPe() && 1 <= ADHydro::verbosityLevel)
                {
                  CkPrintf("Finished writing output files.\n");
                }
            }
          }
        } // End if (sdagCondition).
        
        if (currentTime == simulationEndTime)
        {
          serial
          {
            simulationFinished = true;
          }
        }
        else // if (currentTime < simulationEndTime)
        {
          // Advance time.
          serial
          {
            int                             ii;             // Loop counter.
            double                          nextTime;       // Simulation time of the next forcing data in seconds since ADHydro::referenceDate.
            EvapoTranspirationForcingStruct newForcingData; // Updated forcing data to send to elements.
            
            if (nextCheckpointIndex * ADHydro::checkpointPeriod == currentTime)
              {
                ++nextCheckpointIndex;
              }
            
            if (nextOutputIndex * ADHydro::outputPeriod == currentTime)
              {
                ++nextOutputIndex;
              }
            
            currentTime = nextCheckpointIndex * ADHydro::checkpointPeriod;
            
            if (currentTime > nextOutputIndex * ADHydro::outputPeriod)
              {
                currentTime = nextOutputIndex * ADHydro::outputPeriod;
              }
            
            if (currentTime > simulationEndTime)
              {
                currentTime = simulationEndTime;
              }
            
            if (!ADHydro::drainDownMode && jultimeNextInstance < jultimeSize && currentTime >= nextForcingDataTime())
              {
                currentTime = nextForcingDataTime();
                
                // Read and send forcing data.
                if (currentTime < simulationEndTime)
                  {
                    if (readForcingData())
                      {
                        CkExit();
                      }
                    
                    nextTime = nextForcingDataTime();
                    
                    // Send forcing data.  This allows forcing data to be sent ahead of time to hide communication latency.  The only thing throttling how far
                    // ahead forcing data is sent is the file managers waiting for element state messages.  If output times are less frequent than forcing data
                    // times there can be multiple forcing data messages in transit at the same time.
                    for (ii = 0; ii < localNumberOfMeshElements; ++ii)
                      {
                        newForcingData.dz8w   = 20.0f;
                        newForcingData.sfcTmp = t2[ii] + ZERO_C_IN_KELVIN;
                        newForcingData.sfcPrs = psfc[ii];
                        newForcingData.psfc   = psfc[ii] - 120.0f;
                        newForcingData.uu     = u[ii];
                        newForcingData.vv     = v[ii];
                        newForcingData.q2     = qVapor[ii];
                        newForcingData.qc     = qCloud[ii];
                        newForcingData.solDn  = swDown[ii];
                        newForcingData.lwDn   = gLw[ii];
                        newForcingData.prcp   = ADHydro::drainDownMode ? 0.0f : tPrec[ii];
                        newForcingData.tBot   = tslb[ii] + ZERO_C_IN_KELVIN;
                        newForcingData.pblh   = pblh[ii];
                        
                        ADHydro::regionProxy[meshRegion[ii]].sendMeshForcingMessage(currentTime, nextTime, ii + localMeshElementStart, newForcingData);
                      }
                    
                    for (ii = 0; ii < localNumberOfChannelElements; ++ii)
                      {
                        newForcingData.dz8w   = 20.0f;
                        newForcingData.sfcTmp = t2_c[ii] + ZERO_C_IN_KELVIN;
                        newForcingData.sfcPrs = psfc_c[ii];
                        newForcingData.psfc   = psfc_c[ii] - 120.0f;
                        newForcingData.uu     = u_c[ii];
                        newForcingData.vv     = v_c[ii];
                        newForcingData.q2     = qVapor_c[ii];
                        newForcingData.qc     = qCloud_c[ii];
                        newForcingData.solDn  = swDown_c[ii];
                        newForcingData.lwDn   = gLw_c[ii];
                        newForcingData.prcp   = ADHydro::drainDownMode ? 0.0f : tPrec_c[ii];
                        newForcingData.tBot   = tslb_c[ii] + ZERO_C_IN_KELVIN;
                        newForcingData.pblh   = pblh_c[ii];
                        
                        ADHydro::regionProxy[channelRegion[ii]].sendChannelForcingMessage(currentTime, nextTime, ii + localChannelElementStart, newForcingData);
                      }
                  } // End read and send forcing data.
              }  // End if (!ADHydro::drainDownMode && jultimeNextInstance < jultimeSize &&
                 //         currentTime >= (jultime[jultimeNextInstance] - ADHydro::referenceDate) * (24.0 * 3600.0)).
            
            sdagCondition = (currentTime == nextCheckpointIndex * ADHydro::checkpointPeriod || currentTime == nextOutputIndex * ADHydro::outputPeriod ||
                             currentTime == simulationEndTime);
          } // End advance time.
          
          if (sdagCondition)
          {
            serial
            {
              int ii; // Loop counter.
              
              // Set all element state to not updated.
              for (ii = 0; ii < localNumberOfMeshElements; ++ii)
                {
                  meshElementUpdated[ii] = false;
                }
              
              for (ii = 0; ii < localNumberOfChannelElements; ++ii)
                {
                  channelElementUpdated[ii] = false;
                }
            }
            
            while (!allStateUpdated())
            {
              // Receive state updates.
              when sendElementStateMessages(double messageTime, std::vector<ElementStateMessage> meshElementStateMessages,
                                            std::vector<ElementStateMessage> channelElementStateMessages)
              {
                serial
                {
                  std::vector<ElementStateMessage>::iterator it; // For looping over state messages.
                  
                  if (messageTime > currentTime)
                    {
                      // Message from the future.  Don't receive yet.
                      thisProxy[CkMyPe()].sendElementStateMessages(messageTime, meshElementStateMessages, channelElementStateMessages);
                    }
                  else if (messageTime == currentTime)
                    {
                      for (it = meshElementStateMessages.begin(); it != meshElementStateMessages.end(); ++it)
                        {
                          handleMeshElementStateMessage(*it);
                        }
                      
                      for (it = channelElementStateMessages.begin(); it != channelElementStateMessages.end(); ++it)
                        {
                          handleChannelElementStateMessage(*it);
                        }
                    }
#if (DEBUG_LEVEL & DEBUG_LEVEL_INTERNAL_SIMPLE)
                  else
                    {
                      CkError("ERROR in FileManager::runUntilSimulationEnd: state message received from the past.  This should never happen.\n");
                      CkExit();
                    }
#endif // (DEBUG_LEVEL & DEBUG_LEVEL_INTERNAL_SIMPLE)
                } // End serial inside of receive state updates.
              } // End receive state updates.
            } // End while (!allStateUpdated()).
          } // End if (sdagCondition).
        } // End else if (currentTime < simulationEndTime).
      } // End while (!simulationFinished).
      
      // On PE zero wait for the last mass balance reduction to finish before exiting.
      if (0 == CkMyPe())
      {
        when massBalanceDone()
        {
          // No-op.
        }
      }
      
      // Wait until all file managers finish before exiting.
      serial
      {
        contribute(CkCallback(CkCallback::ckExit));
      }
    }; // End entry void runUntilSimulationEnd().
    
    entry void getMeshVertexDataMessage(int requester, int node);
    entry void getChannelVertexDataMessage(int requester, int node);
    entry void meshVertexDataMessage(int node, double x, double y, double zSurface);
    entry void channelVertexDataMessage(int node, double x, double y, double zBank);
    entry void sendInitializationMessages(CProxy_Region regionProxy);
    entry [reductiontarget] void barrier();
    entry void sendElementStateMessages(double messageTime, std::vector<ElementStateMessage> meshElementStateMessages,
                                        std::vector<ElementStateMessage> channelElementStateMessages);
    entry void massBalanceDone();
  }; // End group FileManager.
}; // End module file_manager.
