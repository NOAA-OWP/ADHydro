module region
{
  array [1D] Region
  {
    entry Region(double referenceDateInit, double currentTimeInit, double simulationEndTimeInit);
    
    // Dummy function for structured dagger infinite loop.
    entry void runUntilSimulationEnd()
    {
      // Do initialization.  First receive all elements.
      while (meshElements.size() < numberOfMeshElements || channelElements.size() < numberOfChannelElements)
      {
        case
        {
          when sendInitializeMeshElement(int elementNumberInit, int catchmentInit, int vegetationTypeInit, int soilTypeInit, double vertexXInit[3],
                                         double vertexYInit[3], double elementXInit, double elementYInit, double elementZSurfaceInit, double layerZBottomInit,
                                         double elementAreaInit, double slopeXInit, double slopeYInit, double latitudeInit, double longitudeInit,
                                         double manningsNInit, double conductivityInit, double porosityInit, double surfacewaterDepthInit,
                                         double surfacewaterErrorInit, double groundwaterHeadInit, double groundwaterRechargeInit, double groundwaterErrorInit,
                                         double precipitationRateInit, double precipitationCumulativeShortTermInit, double precipitationCumulativeLongTermInit,
                                         double evaporationRateInit, double evaporationCumulativeShortTermInit, double evaporationCumulativeLongTermInit,
                                         double transpirationRateInit, double transpirationCumulativeShortTermInit, double transpirationCumulativeLongTermInit,
                                         EvapoTranspirationForcingStruct& evapoTranspirationForcingInit, double nextForcingDataTimeInit,
                                         EvapoTranspirationStateStruct& evapoTranspirationStateInit,
                                         InfiltrationAndGroundwater::GroundwaterMethodEnum groundwaterMethodInit,
                                         InfiltrationAndGroundwater::VadoseZone vadoseZoneInit, std::vector<simpleNeighborInfo> surfacewaterMeshNeighbors,
                                         std::vector<simpleNeighborInfo> surfacewaterChannelNeighbors,
                                         std::vector<simpleNeighborInfo> groundwaterMeshNeighbors, std::vector<simpleNeighborInfo> groundwaterChannelNeighbors)
          {
            serial
            {
              handleInitializeMeshElement(elementNumberInit, catchmentInit, vegetationTypeInit, soilTypeInit, vertexXInit, vertexYInit, elementXInit,
                                          elementYInit, elementZSurfaceInit, layerZBottomInit, elementAreaInit, slopeXInit, slopeYInit, latitudeInit,
                                          longitudeInit, manningsNInit, conductivityInit, porosityInit, surfacewaterDepthInit, surfacewaterErrorInit,
                                          groundwaterHeadInit, groundwaterRechargeInit, groundwaterErrorInit, precipitationRateInit,
                                          precipitationCumulativeShortTermInit, precipitationCumulativeLongTermInit, evaporationRateInit,
                                          evaporationCumulativeShortTermInit, evaporationCumulativeLongTermInit, transpirationRateInit,
                                          transpirationCumulativeShortTermInit, transpirationCumulativeLongTermInit, evapoTranspirationForcingInit,
                                          nextForcingDataTimeInit, evapoTranspirationStateInit, groundwaterMethodInit, vadoseZoneInit,
                                          surfacewaterMeshNeighbors, surfacewaterChannelNeighbors, groundwaterMeshNeighbors, groundwaterChannelNeighbors);
            }
          }
          
          when sendInitializeChannelElement(int elementNumberInit, ChannelTypeEnum channelTypeInit, long long reachCodeInit, double elementXInit,
                                            double elementYInit, double elementZBankInit, double elementZBedInit, double elementLengthInit,
                                            double latitudeInit, double longitudeInit, double baseWidthInit, double sideSlopeInit, double bedConductivityInit,
                                            double bedThicknessInit, double manningsNInit, double surfacewaterDepthInit, double surfacewaterErrorInit,
                                            double precipitationRateInit, double precipitationCumulativeShortTermInit, double precipitationCumulativeLongTermInit,
                                            double evaporationRateInit, double evaporationCumulativeShortTermInit, double evaporationCumulativeLongTermInit,
                                            EvapoTranspirationForcingStruct& evapoTranspirationForcingInit, double nextForcingDataTimeInit,
                                            EvapoTranspirationStateStruct& evapoTranspirationStateInit,
                                            std::vector<simpleNeighborInfo> surfacewaterMeshNeighbors,
                                            std::vector<simpleNeighborInfo> surfacewaterChannelNeighbors,
                                            std::vector<simpleNeighborInfo> groundwaterMeshNeighbors)
          {
            serial
            {
              handleInitializeChannelElement(elementNumberInit, channelTypeInit, reachCodeInit, elementXInit, elementYInit, elementZBankInit, elementZBedInit,
                                             elementLengthInit, latitudeInit, longitudeInit, baseWidthInit, sideSlopeInit, bedConductivityInit,
                                             bedThicknessInit, manningsNInit, surfacewaterDepthInit, surfacewaterErrorInit, precipitationRateInit,
                                             precipitationCumulativeShortTermInit, precipitationCumulativeLongTermInit, evaporationRateInit,
                                             evaporationCumulativeShortTermInit, evaporationCumulativeLongTermInit, evapoTranspirationForcingInit,
                                             nextForcingDataTimeInit, evapoTranspirationStateInit, surfacewaterMeshNeighbors, surfacewaterChannelNeighbors,
                                             groundwaterMeshNeighbors);
            }
          }
        } // End case inside of while (meshElements.size() < numberOfMeshElements || channelElements.size() < numberOfChannelElements).
      } // End while (meshElements.size() < numberOfMeshElements || channelElements.size() < numberOfChannelElements).
      
      // Receive until all neighbor proxies are initialized.
      while (!allNeighborsInitialized())
      {
        if (!sentMyDiversionsInitialized)
        {
          serial
          {
            checkIfMyDiversionsInitialized();
          }
        }
        
        case
        {
          when sendMeshSurfacewaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborX, double neighborY,
                                                           double neighborZSurface, double neighborArea, double neighborManningsN)
          {
            serial
            {
              handleMeshSurfacewaterMeshNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborX, neighborY, neighborZSurface, neighborArea,
                                                            neighborManningsN);
            }
          }
          
          when sendMeshSurfacewaterChannelNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, ChannelTypeEnum neighborChannelType,
                                                              double neighborX, double neighborY, double neighborZBank, double neighborZBed,
                                                              double neighborBaseWidth, double neighborSideSlope)
          {
            serial
            {
              handleMeshSurfacewaterChannelNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborChannelType, neighborX, neighborY,
                                                               neighborZBank, neighborZBed, neighborBaseWidth, neighborSideSlope);
            }
          }
          
          when sendMeshGroundwaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborX, double neighborY,
                                                          double neighborZSurface, double neighborLayerZBottom, double neighborArea,
                                                          double neighborConductivity, double neighborPorosity)
          {
            serial
            {
              handleMeshGroundwaterMeshNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborX, neighborY, neighborZSurface,
                                                           neighborLayerZBottom, neighborArea, neighborConductivity, neighborPorosity);
            }
          }
          
          when sendMeshGroundwaterChannelNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, ChannelTypeEnum neighborChannelType,
                                                             double neighborX, double neighborY, double neighborZBank, double neighborZBed,
                                                             double neighborBaseWidth, double neighborSideSlope, double neighborBedConductivity,
                                                             double neighborBedThickness)
          {
            serial
            {
              handleMeshGroundwaterChannelNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborChannelType, neighborX, neighborY,
                                                              neighborZBank, neighborZBed, neighborBaseWidth, neighborSideSlope, neighborBedConductivity,
                                                              neighborBedThickness);
            }
          }
          
          when sendChannelSurfacewaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborVertexX[3],
                                                              double neighborVertexY[3], double neighborX, double neighborY, double neighborZSurface,
                                                              double neighborArea, double neighborSlopeX, double neighborSlopeY)
          {
            serial
            {
              handleChannelSurfacewaterMeshNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborVertexX, neighborVertexY, neighborX,
                                                               neighborY, neighborZSurface, neighborArea, neighborSlopeX, neighborSlopeY);
            }
          }
          
          when sendChannelSurfacewaterChannelNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, ChannelTypeEnum neighborChannelType,
                                                                 double neighborZBank, double neighborZBed, double neighborLength, double neighborBaseWidth,
                                                                 double neighborSideSlope, double neighborManningsN, bool inflowOnly)
          {
            serial
            {
              handleChannelSurfacewaterChannelNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborChannelType, neighborZBank, neighborZBed,
                                                                  neighborLength, neighborBaseWidth, neighborSideSlope, neighborManningsN, inflowOnly);
            }
          }
          
          when sendChannelGroundwaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborVertexX[3],
                                                             double neighborVertexY[3], double neighborX, double neighborY, double neighborZSurface,
                                                             double neighborLayerZBottom, double neighborSlopeX, double neighborSlopeY)
          {
            serial
            {
              handleChannelGroundwaterMeshNeighborInitMessage(element, neighbor, reciprocalNeighborProxy, neighborVertexX, neighborVertexY, neighborX,
                                                              neighborY, neighborZSurface, neighborLayerZBottom, neighborSlopeX, neighborSlopeY);
            }
          }
          
          when sendDiversionReleaseRecipientInitMessage(int element, int neighbor, int neighborRegion, ChannelTypeEnum neighborChannelType, double neighborX,
                                                        double neighborY, double neighborZBank, double neighborZBed, double neighborBaseWidth,
                                                        double neighborSideSlope)
          {
            serial
            {
              handleDiversionReleaseRecipientInitMessage(element, neighbor, neighborRegion, neighborChannelType, neighborX, neighborY, neighborZBank,
                                                         neighborZBed, neighborBaseWidth, neighborSideSlope);
            }
          }
          
          when sendDiversionReleaseRecipientInitializedMessage(int element, int neighbor, int neighborRegion, int reciprocalNeighborProxy)
          {
            serial
            {
              handleDiversionReleaseRecipientInitializedMessage(element, neighbor, neighborRegion, reciprocalNeighborProxy);
            }
          }
          
          when sendAllDiversionsInitializedMessage()
          {
            serial
            {
              allDiversionsInitialized = true;
            }
          }
        } // End case inside of while (!allNeighborsInitialized()).
      } // End while (!allNeighborsInitialized()).
      
      // Run the simulation.
      while (!simulationFinished)
      {
        if (currentTime == nextSyncTime)
        {
          serial
          {
            // Start the invariant check.  Do this early because the regions can go on as soon as all neighbor invariant messages arrive.
            if (needToCheckInvariant)
              {
                if (checkInvariant())
                  {
                    CkExit();
                  }
              }
            
            // Send state messages if it is a checkpoint time, output time, or the end of the simulation, unless it is also the beginning of the simulation
            // because the file managers already have the state at the beginning of the simulation.  ADHydro::currentTime is never updated so it continues to
            // hold the time at the beginning of the simulation.
            if ((nextCheckpointIndex * ADHydro::checkpointPeriod == currentTime || nextOutputIndex * ADHydro::outputPeriod == currentTime ||
                 simulationEndTime == currentTime) && ADHydro::currentTime != currentTime)
              {
                sendStateToFileManagers();
              }
          }
          
          if (nextForcingDataTime == currentTime && currentTime < simulationEndTime)
          {
            serial
            {
#if (DEBUG_LEVEL & DEBUG_LEVEL_INTERNAL_SIMPLE)
              // Iterators must not be in use at this time.
              CkAssert(!pupItMeshAndItChannel && !pupItNeighbor);
#endif // (DEBUG_LEVEL & DEBUG_LEVEL_INTERNAL_SIMPLE)
              
              for (itMesh = meshElements.begin(); itMesh != meshElements.end(); ++itMesh)
                {
                  (*itMesh).second.forcingUpdated = false;
                }
              
              for (itChannel = channelElements.begin(); itChannel != channelElements.end(); ++itChannel)
                {
                  (*itChannel).second.forcingUpdated = false;
                }
            }
            
            while(!allForcingUpdated())
            {
              case
              {
                when sendMeshForcingMessage(double messageTime, double nextTime, int element, EvapoTranspirationForcingStruct newForcingData)
                {
                  serial
                  {
                    if (messageTime > currentTime)
                      {
                        // Message from the future.  Don't receive yet.
                        thisProxy[thisIndex].sendMeshForcingMessage(messageTime, nextTime, element, newForcingData);
                      }
                    else // FIXME error check for message from the past
                      {
                        // FIXME error check
                        
                        nextForcingDataTime                             = nextTime;
                        meshElements[element].evapoTranspirationForcing = newForcingData;
                        meshElements[element].forcingUpdated            = true;
                      }
                  }
                }
                
                when sendChannelForcingMessage(double messageTime, double nextTime, int element, EvapoTranspirationForcingStruct newForcingData)
                {
                  serial
                  {
                    if (messageTime > currentTime)
                      {
                        // Message from the future.  Don't receive yet.
                        thisProxy[thisIndex].sendChannelForcingMessage(messageTime, nextTime, element, newForcingData);
                      }
                    else // FIXME error check for message from the past
                      {
                        // FIXME error check
                        
                        nextForcingDataTime                                = nextTime;
                        channelElements[element].evapoTranspirationForcing = newForcingData;
                        channelElements[element].forcingUpdated            = true;
                      }
                  }
                }
              }
            } // End while(!allForcingUpdated()).
          } // End if (nextForcingDataTime == currentTime).
          
          serial
          {
            // Advance nextCheckpointIndex, nextOutputIndex, and nextSyncTime.
            if (nextCheckpointIndex * ADHydro::checkpointPeriod == currentTime)
              {
                ++nextCheckpointIndex;
              }
            
            if (nextOutputIndex * ADHydro::outputPeriod == currentTime)
              {
                ++nextOutputIndex;
              }
            
            nextSyncTime = nextCheckpointIndex * ADHydro::checkpointPeriod;
            
            if (nextSyncTime > nextOutputIndex * ADHydro::outputPeriod)
              {
                nextSyncTime = nextOutputIndex * ADHydro::outputPeriod;
              }
            
            if (nextSyncTime > simulationEndTime)
              {
                nextSyncTime = simulationEndTime;
              }
            
            if (nextSyncTime > nextForcingDataTime)
              {
                nextSyncTime = nextForcingDataTime;
              }
          
            // Do a mass balance.
            bool   error                = false;
            double massBalanceValues[4] = {0.0, 0.0, 0.0, 0.0};
            
            // I want to pass currentTime to the reduction target, but any values that I contribute to the reduction will be summed.  I couldn't figure out how
            // to make a reduction where some of the values are summed, and others are just passed as parameters.  I suspect that capability doesn't exist in
            // Charm++.  To create the same effect I'm having region zero contribute currentTime and all other regions contribute zero so that the sum will be
            // currentTime.
            if (0 == thisIndex)
              {
                massBalanceValues[0] = currentTime;
              }
            
            error = massBalance(massBalanceValues[1], massBalanceValues[2], massBalanceValues[3]);
            
            if (!error)
              {
                contribute(4 * sizeof(double), massBalanceValues, CkReduction::sum_double);
              }
            else
              {
                CkExit();
              }
          }
          
          // Wait for all neighbor invariant messages.
          while (needToCheckInvariant && !allNeighborInvariantsChecked())
          {
            case
            {
              when sendMeshSurfacewaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshSurfacewaterMeshNeighborProxy neighborsProxy)
              {
                serial
                {
                  handleMeshSurfacewaterMeshNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
              
              when sendMeshSurfacewaterChannelNeighborCheckInvariant(double messageTime, int neighbor, ChannelSurfacewaterMeshNeighborProxy neighborsProxy)
              {
                serial
                {
                  handleMeshSurfacewaterChannelNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
              
              when sendMeshGroundwaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshGroundwaterMeshNeighborProxy neighborsProxy)
              {
                serial
                {
                  handleMeshGroundwaterMeshNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
              
              when sendMeshGroundwaterChannelNeighborCheckInvariant(double messageTime, int neighbor, ChannelGroundwaterMeshNeighborProxy neighborsProxy)
              {
                serial
                {
                  handleMeshGroundwaterChannelNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
              
              when sendChannelSurfacewaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshSurfacewaterChannelNeighborProxy neighborsProxy)
             {
                serial
                {
                  handleChannelSurfacewaterMeshNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
              
              when sendChannelSurfacewaterChannelNeighborCheckInvariant(double messageTime, int neighbor, ChannelSurfacewaterChannelNeighborProxy neighborsProxy)
              {
                serial
                {
                  handleChannelSurfacewaterChannelNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
              
              when sendChannelGroundwaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshGroundwaterChannelNeighborProxy neighborsProxy)
              {
                serial
                {
                  handleChannelGroundwaterMeshNeighborCheckInvariant(messageTime, neighbor, neighborsProxy);
                }
              }
            } // End case inside of while (!allNeighborInvariantsChecked()).
          } // End while (needToCheckInvariant && !allNeighborInvariantsChecked()).
          
          serial
          {
#if !(DEBUG_LEVEL & DEBUG_LEVEL_INTERNAL_INVARIANTS)
            // If debug level does not include internal invariants only check the invariant at most once at the beginning of the simulation.
            needToCheckInvariant = false;
#endif // !(DEBUG_LEVEL & DEBUG_LEVEL_INTERNAL_INVARIANTS)
          }
        } // End if (currentTime == nextSyncTime).
        
        if (currentTime == simulationEndTime)
        {
          serial
          {
            simulationFinished = true;
          }
        }
        else // if (currentTime < simulationEndTime)
        {
          // Advance time.
          
          // Step 1: Calculate nominal flow rates with neighbors.
          serial
          {
            sendStateToExternalNeighbors();
          }
          
          // Continue step 1 by calculating nominal flow rates with internal neighbors.
          when calculateNominalFlowRatesForInternalNeighbors()
          {
            serial
            {
              handleCalculateNominalFlowRatesForInternalNeighbors();
            }
          }
          
          // Finish step 1 by receiving state messages until all nominal flow rates are calculated.
          // Step 2: Select timestep is accomplished while scanning to see if all nominal flow rates are calculated.  That scan finds the minimum expiration
          // time, which is chosen as the next timestep end time.
          while (!allNominalFlowRatesCalculated())
          {
            when sendStateMessages(double senderCurrentTime, double senderRegionalDtLimit, std::vector<RegionMessage> stateMessages)
            {
              serial
              {
                processStateMessages(senderCurrentTime, senderRegionalDtLimit, stateMessages);
              }
            }
          }
          
          // Step 3: Send outflows of material to neighbors.
          serial
          {
            doPointProcessesAndSendOutflows();
          }
          
          // Step 4: Receive inflows of material from neighbors.
          while (!allInflowsArrived())
          {
            when sendWaterMessages(std::vector<RegionMessage> waterMessages)
            {
              serial
              {
                processWaterMessages(waterMessages);
              }
            }
          }
          
          // Finish step 4 by moving water from incoming material lists to element state variables.
          // Step 5: Advance time.
          serial
          {
            receiveInflowsAndAdvanceTime();
          }
        } // End if (currentTime < simulationEndTime).
      } // End while (!simulationFinished).
    }; // End entry void runUntilSimulationEnd();
    
    entry void sendMeshSurfacewaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshSurfacewaterMeshNeighborProxy neighborsProxy);
    entry void sendMeshSurfacewaterChannelNeighborCheckInvariant(double messageTime, int neighbor, ChannelSurfacewaterMeshNeighborProxy neighborsProxy);
    entry void sendMeshGroundwaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshGroundwaterMeshNeighborProxy neighborsProxy);
    entry void sendMeshGroundwaterChannelNeighborCheckInvariant(double messageTime, int neighbor, ChannelGroundwaterMeshNeighborProxy neighborsProxy);
    entry void sendChannelSurfacewaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshSurfacewaterChannelNeighborProxy neighborsProxy);
    entry void sendChannelSurfacewaterChannelNeighborCheckInvariant(double messageTime, int neighbor, ChannelSurfacewaterChannelNeighborProxy neighborsProxy);
    entry void sendChannelGroundwaterMeshNeighborCheckInvariant(double messageTime, int neighbor, MeshGroundwaterChannelNeighborProxy neighborsProxy);
    entry void sendInitializeMeshElement(int elementNumberInit, int catchmentInit, int vegetationTypeInit, int soilTypeInit, double vertexXInit[3],
                                         double vertexYInit[3], double elementXInit, double elementYInit, double elementZSurfaceInit, double layerZBottomInit,
                                         double elementAreaInit, double slopeXInit, double slopeYInit, double latitudeInit, double longitudeInit,
                                         double manningsNInit, double conductivityInit, double porosityInit, double surfacewaterDepthInit,
                                         double surfacewaterErrorInit, double groundwaterHeadInit, double groundwaterRechargeInit, double groundwaterErrorInit,
                                         double precipitationRateInit, double precipitationCumulativeShortTermInit, double precipitationCumulativeLongTermInit,
                                         double evaporationRateInit, double evaporationCumulativeShortTermInit, double evaporationCumulativeLongTermInit,
                                         double transpirationRateInit, double transpirationCumulativeShortTermInit, double transpirationCumulativeLongTermInit,
                                         EvapoTranspirationForcingStruct& evapoTranspirationForcingInit, double nextForcingDataTimeInit,
                                         EvapoTranspirationStateStruct& evapoTranspirationStateInit,
                                         InfiltrationAndGroundwater::GroundwaterMethodEnum groundwaterMethodInit,
                                         InfiltrationAndGroundwater::VadoseZone vadoseZoneInit, std::vector<simpleNeighborInfo> surfacewaterMeshNeighbors,
                                         std::vector<simpleNeighborInfo> surfacewaterChannelNeighbors,
                                         std::vector<simpleNeighborInfo> groundwaterMeshNeighbors, std::vector<simpleNeighborInfo> groundwaterChannelNeighbors);
    entry void sendInitializeChannelElement(int elementNumberInit, ChannelTypeEnum channelTypeInit, long long reachCodeInit, double elementXInit,
                                            double elementYInit, double elementZBankInit, double elementZBedInit, double elementLengthInit,
                                            double latitudeInit, double longitudeInit, double baseWidthInit, double sideSlopeInit, double bedConductivityInit,
                                            double bedThicknessInit, double manningsNInit, double surfacewaterDepthInit, double surfacewaterErrorInit,
                                            double precipitationRateInit, double precipitationCumulativeShortTermInit, double precipitationCumulativeLongTermInit,
                                            double evaporationRateInit, double evaporationCumulativeShortTermInit, double evaporationCumulativeLongTermInit,
                                            EvapoTranspirationForcingStruct& evapoTranspirationForcingInit, double nextForcingDataTimeInit,
                                            EvapoTranspirationStateStruct& evapoTranspirationStateInit,
                                            std::vector<simpleNeighborInfo> surfacewaterMeshNeighbors,
                                            std::vector<simpleNeighborInfo> surfacewaterChannelNeighbors,
                                            std::vector<simpleNeighborInfo> groundwaterMeshNeighbors);
    entry void sendMeshSurfacewaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborX, double neighborY,
                                                           double neighborZSurface, double neighborArea, double neighborManningsN);
    entry void sendMeshSurfacewaterChannelNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, ChannelTypeEnum neighborChannelType,
                                                              double neighborX, double neighborY, double neighborZBank, double neighborZBed,
                                                              double neighborBaseWidth, double neighborSideSlope);
    entry void sendMeshGroundwaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborX, double neighborY,
                                                          double neighborZSurface, double neighborLayerZBottom, double neighborArea,
                                                          double neighborConductivity, double neighborPorosity);
    entry void sendMeshGroundwaterChannelNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, ChannelTypeEnum neighborChannelType,
                                                             double neighborX, double neighborY, double neighborZBank, double neighborZBed,
                                                             double neighborBaseWidth, double neighborSideSlope, double neighborBedConductivity,
                                                             double neighborBedThickness);
    entry void sendChannelSurfacewaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborVertexX[3],
                                                              double neighborVertexY[3], double neighborX, double neighborY, double neighborZSurface,
                                                              double neighborArea, double neighborSlopeX, double neighborSlopeY);
    entry void sendChannelSurfacewaterChannelNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, ChannelTypeEnum neighborChannelType,
                                                                 double neighborZBank, double neighborZBed, double neighborLength, double neighborBaseWidth,
                                                                 double neighborSideSlope, double neighborManningsN, bool inflowOnly);
    entry void sendChannelGroundwaterMeshNeighborInitMessage(int element, int neighbor, int reciprocalNeighborProxy, double neighborVertexX[3],
                                                             double neighborVertexY[3], double neighborX, double neighborY, double neighborZSurface,
                                                             double neighborLayerZBottom, double neighborSlopeX, double neighborSlopeY);
    entry void sendDiversionReleaseRecipientInitMessage(int element, int neighbor, int neighborRegion, ChannelTypeEnum neighborChannelType, double neighborX,
                                                        double neighborY, double neighborZBank, double neighborZBed, double neighborBaseWidth,
                                                        double neighborSideSlope);
    entry void sendDiversionReleaseRecipientInitializedMessage(int element, int neighbor, int neighborRegion, int reciprocalNeighborProxy);
    entry [reductiontarget] void sendAllDiversionsInitializedMessage();
    entry void calculateNominalFlowRatesForInternalNeighbors();
    entry void sendStateMessages(double senderCurrentTime, double senderRegionalDtLimit, std::vector<RegionMessage> stateMessages);
    entry void sendWaterMessages(std::vector<RegionMessage> waterMessages);
    entry void sendMeshForcingMessage(double messageTime, double nextTime, int element, EvapoTranspirationForcingStruct newForcingData);
    entry void sendChannelForcingMessage(double messageTime, double nextTime, int element, EvapoTranspirationForcingStruct newForcingData);
  }; // End array [1D] Region.
}; // End module region.
