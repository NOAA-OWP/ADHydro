mainmodule adhydro
{
  extern module file_manager;
  extern module mesh_element;
  extern module channel_element;
  
  mainchare [migratable] ADHydro
  {
    readonly bool appendToInputFiles;
    readonly bool drainDownMode;
    readonly bool doMeshMassage;
    readonly int  verbosityLevel;
    initproc void setLoadBalancingToManual();
    entry ADHydro(CkArgMsg* msg);
    entry [reductiontarget] void fileManagerInitialized();
    entry [reductiontarget] void writeFiles();
    entry [reductiontarget] void checkForcingData();
    
    entry void waitForForcingDataToFinish()
    {
      when meshForcingDataDone(), channelForcingDataDone()
      {
        serial
        {
          forcingDataDone();
        }
      }
    };
    
    entry [reductiontarget] void meshForcingDataDone();
    entry [reductiontarget] void channelForcingDataDone();
    
    entry void waitForInvariantToFinish()
    {
      when meshInvariantDone(), channelInvariantDone()
      {
        serial
        {
          doTimestep();
        }
      }
    };
    
    entry [reductiontarget] void meshInvariantDone();
    entry [reductiontarget] void channelInvariantDone();
    
    entry void waitForTimestepToFinish()
    {
      when meshTimestepDone(double dtNewMesh), channelTimestepDone(double dtNewChannel)
      {
        serial
        {
          timestepDone((dtNewMesh < dtNewChannel) ? dtNewMesh : dtNewChannel);
        }
      }
    };
    
    entry [reductiontarget] void meshTimestepDone(double dtNewMesh);
    entry [reductiontarget] void channelTimestepDone(double dtNewChannel);
  }; // End mainchare [migratable] ADHydro.
}; // End mainmodule adhydro.
