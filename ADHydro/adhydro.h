#ifndef __ADHYDRO_H__
#define __ADHYDRO_H__

#include "mesh_element.h"
#include "file_manager.h"

// Suppress warnings in the The Charm++ autogenerated code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#include "adhydro.decl.h"
#pragma GCC diagnostic warning "-Wsign-compare"

// Here is a call graph for the operation of the adhydro program:
//
//              |
// _______>  or | = call
//              V
//
//              :
// ------->  or : = callback
//              V
//
//              ADHydro(CkArgMsg* msg)
//                     :
//                     :
//                     :
//                     V
//              inputFilesOpened()
//                     :
//                     :
//                     :
//                     V
//              inputFilesRead()
//              |            |
//              |            |
//              |            |
//              V            V
// checkInvariant() -------> doTimestep() _______> CkExit()
//              ^            ^    :
//              |            |    :
//              |            |    :
//              |            |    V
//          timestepDone(double dtNew)
class ADHydro : public CBase_ADHydro
{
public:
  
  // Set the load balancing mode to manual.  We need to wait for a few
  // timesteps to generate load statistics, and then we need to load balance
  // once.  After that we need to load balance very rarely if at all.
  static void setLoadBalancingToManual();
  
  // Constructor.  This is the mainchare constructor where the program starts.
  // Will cause a callback to inputFilesOpened or exit on error.
  //
  // Parameters:
  //
  // msg - Charm++ command line arguments message.
  ADHydro(CkArgMsg* msg);
  
  // Charm++ migration constructor.
  //
  // Parameters:
  //
  // msg - Charm++ migration message.
  ADHydro(CkMigrateMessage* msg);
  
  // Pack/unpack method.
  //
  // Parameters:
  //
  // p - Pack/unpack processing object.
  void pup(PUP::er &p);

  // Callback from file manager after input files are opened for read.
  // Will cause a callback on inputFilesRead.
  void inputFilesOpened();
  
  // Callback from mesh after input files are read to initialize mesh.
  void inputFilesRead();
  
  // Callback from file manager after files are closed.
  void filesClosed();
  
  // If currentTime is less than endTime do a timestep otherwise exit.
  // Will cause a callback to timestepDone or exit on error.
  void doTimestep();
  
  // Callback for the dtNew reduction at the end of a timestep.  Exit on error.
  //
  // Parameters:
  //
  // dtNew - The minimum new timestep requested by any element.
  void timestepDone(double dtNew);
  
  // Readonly variable for mesh elements to know the size of their array.
  static int meshProxySize;
  
private:
  
  // Check invariant on member variables.  Exit if invariant is violated.
  void checkInvariant();
  
  // Array of mesh elements.
  CProxy_MeshElement meshProxy;
  
  // Group of file managers.
  CProxy_FileManager fileManagerProxy;
  
  // Time information.
  double currentTime; // Seconds.
  double endTime;     // Seconds.
  double dt;          // Next timestep duration in seconds.
  int    iteration;   // Iteration number to put on all messages next timestep.
};

#endif // __ADHYDRO_H__
