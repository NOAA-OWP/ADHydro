#ifndef __ADHYDRO_H__
#define __ADHYDRO_H__

#include "mesh_element.h"
#include "file_manager.h"

// Suppress warnings in the The Charm++ autogenerated code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#include "adhydro.decl.h"
#pragma GCC diagnostic warning "-Wsign-compare"

// Here is a call graph for the normal operation of the adhydro program:
//
//              |
// _______>  or | = call
//              V
//
//              :
// ------->  or : = callback
//              V
//
//         ADHydro(CkArgMsg* msg)
//                :
//                :
//                :
//                V
//         inputFilesOpened()
//                :
//                :
//                :
//                V
//         inputFilesRead()
//                :
//                :
//                :
//                V
//         inputFilesClosed()
//         |      |
//         |      |
//         |      |
//         |      V
//         |    checkInvariant() <________________
//         |      :       :                       |
//         |      :       :                       |
//         |      :       :                       |
//         V      V       V                       |
// createOutputFiles()    checkOutputTime() <_____|
//                :       :          |            |
//                :       :          |            |
//                :       :          |            |
//                V       V          |            |
//         writeOutputFiles()        |            |
//                :                  |            |
//                :                  |            |
//                :                  |            |
//                V                  |            |
//         outputFilesWritten()      |            |
//                |                  |            |
//                |  ________________|            |
//                | |                             |
//                V V                             |
//         doTimestep() _____> endProgram()       |
//                :                               |
//                :                               |
//                :                               |
//                V                               |
//         timestepDone(double dtNew) ____________|
class ADHydro : public CBase_ADHydro
{
public:
  
  // Set the load balancing mode to manual.  We need to wait for a few
  // timesteps to generate load statistics, and then we need to load balance
  // once.  After that we need to load balance very rarely if at all.
  static void setLoadBalancingToManual();
  
  // Constructor.  This is the mainchare constructor where the program starts.
  // Will cause a callback to inputFilesOpened or exit on error.
  //
  // Parameters:
  //
  // msg - Charm++ command line arguments message.
  ADHydro(CkArgMsg* msg);
  
  // Charm++ migration constructor.
  //
  // Parameters:
  //
  // msg - Charm++ migration message.
  ADHydro(CkMigrateMessage* msg);
  
  // Pack/unpack method.
  //
  // Parameters:
  //
  // p - Pack/unpack processing object.
  void pup(PUP::er &p);

  // Callback from file manager after input files are opened.
  // Will cause a callback on inputFilesRead.
  void inputFilesOpened();
  
  // Callback from mesh after input files are read to initialize mesh.
  // Will cause a callback on inputFilesClosed.
  void inputFilesRead();
  
  // Callback from file manager after input files are closed.
  // Will call checkInvariant or createOutputFiles.
  void inputFilesClosed();
  
  // Check invariant on member variables and mesh.  Will cause a callback to
  // the default reduction client set for meshProxy or exit if invariant is
  // violated.  Default reduction client for meshProxy must already be set to
  // createOutputFiles or checkOutputTime before calling checkInvariant.
  void checkInvariant();
  
  // Callback from mesh after invariant is checked on user input, or is called
  // directly if invariant is skipped.  Will cause a callback on
  // writeOutputFiles.
  void createOutputFiles();
  
  // Callback from mesh after invariant is checked as an internal assertion, or
  // is called directly if invariant is skipped.  Will cause a callback on
  // writeOutputFiles.
  void checkOutputTime();
  
  // Callback from file manager after output files are created or opened.
  // Will cause a callback on outputFilesWritten or exit on error.
  void writeOutputFiles();
  
  // Callback from Mesh after output files are written.  Will cause a callback
  // on outputFilesClosed and call doTimestep.
  void outputFilesWritten();
  
  // Callback from file manager after output files are closed.  Does nothing.
  // We don't need to wait for output files to be closed or trigger anything
  // when they are closed.
  void outputFilesClosed();
  
  // If currentTime is less than endTime do a timestep otherwise exit.
  // Will cause a callback to timestepDone.
  void doTimestep();
  
  // Callback for the dtNew reduction at the end of a timestep.  Will call
  // checkInvariant or checkOutputTime or exit on error.
  //
  // Parameters:
  //
  // dtNew - The minimum new timestep requested by any element.
  void timestepDone(double dtNew);
  
  // Wait until file manager closes all files and then end program.
  void endProgram();
  
  // Readonly variable for mesh elements to know the size of their array.
  static int meshProxySize;
  
private:
  
  // Chare proxies.
  CProxy_MeshElement meshProxy;        // Array of mesh elements.
  CProxy_FileManager fileManagerProxy; // Group of file managers.
  
  // I/O information
  CkArgMsg* commandLineArguments; // Contains the input and output directory paths.
  int       geometryGroup;        // The NetCDF group number to use in the geometry file.
  int       parameterGroup;       // The NetCDF group number to use in the parameter file.
  int       stateGroup;           // The NetCDF group number to use in the state file.
  bool      waitForFilesToClose;  // Whether we need to wait for a callback that the file manager has closed all files.
  
  // Time information.
  double currentTime;    // Seconds.
  double endTime;        // Seconds.
  double dt;             // Next timestep duration in seconds.
  double outputPeriod;   // Duration between output phases in seconds.
  double nextOutputTime; // Time of next output phase in seconds.
  int    iteration;      // Iteration number to put on all messages next timestep.
};

#endif // __ADHYDRO_H__
