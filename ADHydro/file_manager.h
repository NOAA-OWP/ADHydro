#ifndef __FILE_MANAGER_H__
#define __FILE_MANAGER_H__

// The file manager group handles opening, creating data items, and closing
// NetCDF files.  NetCDF files are used to load the initial state of the
// simulation and output the state as the simulation runs.  The file formats
// for input and output are the same so an output file can be used as a
// hotstart input file for another simulation run.
//
// With an appropriate XDMF XML file, the NetCDF files can also be displayed in
// ParaView.  FIXME Describe how to create the XML file.
//
// The file manager is implemented as a Charm++ chare group because certain
// parallel I/O operations must be done collectively where the same call is
// made once on each processing element.  After the file manager opens the
// files and creates data items, ordinary chares can read and write the data
// items in parallel independently as long as no two chares write to the same
// location concurrently.
//
// In order to minimize the chance of losing data, each time the program wants
// to perform a file I/O phase the files are opened, the I/O is performed, and
// then the files are closed.  This is why the creation of data items is
// combined with opening files.  The files are opened specifically to write
// those data items.  There is never a need to ask the file manager to create
// more data items in already opened files.
//
// FIXME Describe the file format.

// Flags to indicate the action to take when opening files.
// This must be declared before #include "file_manager.decl.h" to be used as a
// parameter for the entry method openFiles.  Also, it cannot be a member
// of FileManager like it should be because C++ doesn't allow scope qualified
// forward declarations like enum FileManager::ActionEnum;
enum FileManagerActionEnum
{
  FILE_MANAGER_NO_ACTION, // Do not open the file.
  FILE_MANAGER_READ,      // Open the file for reading.  It is an error if the file or data items do not exist.
  FILE_MANAGER_WRITE,     // Open the file for reading and writing and create data items.
                          // It is an error if the file does not exist or the data items already exist.
  FILE_MANAGER_CREATE,    // Create the file and data items.  It is an error if the file already exists.
};

// Suppress warnings in the The Charm++ autogenerated code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#include "file_manager.decl.h"
#pragma GCC diagnostic warning "-Wsign-compare"

class FileManager : public CBase_FileManager
{
  FileManager_SDAG_CODE
  
public:

  // Constructor.
  FileManager();

  // Flags to indicate the current open/closed status of files.
  enum StatusEnum
  {
    FILE_MANAGER_STATUS_CLOSED,
    FILE_MANAGER_STATUS_OPEN_FOR_READ,
    FILE_MANAGER_STATUS_OPEN_FOR_READ_WRITE,
  };

  int        numberOfMeshElements;               // The number of mesh elements in the currently open data items, or undefined if there is no open file.
                                                 // The number of mesh elements in all data items of all files must be the same.
  StatusEnum geometryFileStatus;                 // Open/closed status of geometry file.
  int        geometryFileID;                     // NetCDF File ID of geometry file, or undefined if the geometry file is not open.
  int        geometryGroupID;                    // NetCDF Group ID in geometry file, or undefined if the geometry file is not open.
  StatusEnum parameterFileStatus;                // Open/closed status of parameter file.
  int        parameterFileID;                    // NetCDF File ID of parameter file, or undefined if the parameter file is not open.
  int        parameterGroupID;                   // NetCDF Group ID in parameter file, or undefined if the parameter file is not open.
  StatusEnum stateFileStatus;                    // Open/closed status of state file.
  int        stateFileID;                        // NetCDF File ID of state file, or undefined if the state file is not open.
  int        stateGroupID;                       // NetCDF Group ID in state file, or undefined if the state file is not open.

  // Use geometryGroupID as the ncid when accessing the following variables.
  int        meshElementNodeIndicesVarID;        // NetCDF Variable ID in geometry file for the indices into the node variables for each vertex of each element,
                                                 // or undefined if the geometry file is not open.
  int        meshNodeXYZSurfaceCoordinatesVarID; // NetCDF Variable ID in geometry file for node X,Y,Z surface coordinates, or undefined if the geometry file is
                                                 // not open.
  int        meshNodeZBedrockCoordinatesVarID;   // NetCDF Variable ID in geometry file for node Z bedrock coordinates at the same X,Y coordinates as
                                                 // meshNodeXYZSurfaceCoordinatesVarID, or undefined if the geometry file is not open.

private:

  // Handle a message directing the file manager to open files.  Exit on error.
  //
  // There is a fixed set of files and data items that the file manager handles.
  // The function parameters can direct which of the set of files should be
  // opened for read or write, or created, or not, but the file manager accesses
  // a fixed set of data items for each file.
  //
  // Once a file is open, the data can be accessed through the NetCDF IDs in
  // public member variables.
  //
  // Parameters:
  //
  // directoryLength          - The length of the array directory passed by
  //                            Charm++.  This is not guaranteed to be
  //                            strlen(directory).  It could be longer.
  // directory                - The directory path of the location of the files.
  // numberOfMeshElementsInit - The number of mesh elements to use when creating
  //                            data items.  This is ignored when reading data
  //                            items.  The size of the data item is read from
  //                            the file instead.
  // geometryAction           - What to do for the geometry file.
  // geometryIdentifier       - The name for the group in the geometry file.
  // parameterAction          - What to do for the parameter file.
  // parameterIdentifier      - The name for the group in the parameter file.
  // stateAction              - What to do for the state file.
  // stateIdentifier          - The name for the group in the state file.
  void handleOpenFiles(int directoryLength, char* directory, int numberOfMeshElementsInit, FileManagerActionEnum geometryAction,
                       int geometryIdentifier, FileManagerActionEnum parameterAction, int parameterIdentifier, FileManagerActionEnum stateAction,
                       int stateIdentifier);

  // Handle a message directing the file manager to open files.  Exit on error.
  void handleCloseFiles();
};

PUPbytes(FileManagerActionEnum);
PUPbytes(FileManager::StatusEnum);

#endif // __FILE_MANAGER_H__
