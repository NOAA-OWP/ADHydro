#ifndef __FILE_MANAGER_H__
#define __FILE_MANAGER_H__

// Flags to indicate the action to take when opening files.
// This must be declared before #include "file_manager.decl.h" to be used as a
// parameter for the entry method openFiles.  Also, it cannot be a member
// of FileManager like it should be because C++ doesn't allow scope qualified
// forward declarations like enum FileManager::ActionEnum;
enum FileManagerActionEnum
{
  FILE_MANAGER_NO_ACTION, // Do not open the file.
  FILE_MANAGER_READ,      // Open the file for reading.  It is an error if the file or data items do not exist.
  FILE_MANAGER_WRITE,     // Open the file for reading and writing and create data items.
                          // It is an error if the file does not exist or the data items already exist.
  FILE_MANAGER_CREATE,    // Create the file and data items.  It is an error if the file already exists.
};

// Suppress warnings in the The Charm++ autogenerated code.
#pragma GCC diagnostic ignored "-Wsign-compare"
#include "file_manager.decl.h"
#pragma GCC diagnostic warning "-Wsign-compare"

#include <netcdf.h>

// The file manager group handles opening, creating data items, and closing
// NetCDF files.  NetCDF files are used to load the initial state of the
// simulation and output the state as the simulation runs.  The file formats
// for input and output are the same so an output file can be used as a
// hotstart input file for another simulation run.
//
// With an appropriate XDMF XML file, the NetCDF files can also be displayed in
// ParaView.  FIXME Describe how to create the XML file.
//
// The file manager is implemented as a Charm++ chare group because certain
// parallel I/O operations must be done collectively where the same call is
// made once on each processing element.  After the file manager opens the
// files and creates data items, ordinary chares can read and write the data
// items in parallel independently as long as no two chares write to the same
// location concurrently.
//
// In order to minimize the chance of losing data, each time the program wants
// to perform a file I/O phase the files are opened, the I/O is performed, and
// then the files are closed.  This is why the creation of data items is
// combined with opening files.  The files are opened specifically to write
// those data items.  There is never a need to ask the file manager to create
// more data items in already opened files.
//
// FIXME Describe the file format.
class FileManager : public CBase_FileManager
{
  FileManager_SDAG_CODE
  
public:

  // Constructor.
  FileManager();

  // Flags to indicate the current open/closed status of files.
  enum StatusEnum
  {
    CLOSED,
    OPEN_FOR_READ,
    OPEN_FOR_READ_WRITE,
  };

  int        numberOfMeshElements; // The number of mesh elements in the currently open data items, or undefined if there is no open file.
                                   // The number of mesh elements in all data items of all files must be the same.
  int        numberOfMeshNodes;    // The number of mesh nodes in the currently open data items, or undefined if there is no open file.
                                   // The number of mesh nodes in all data items of all files must be the same.
  StatusEnum geometryFileStatus;   // Open/closed status of geometry file.
  int        geometryFileID;       // NetCDF File ID of geometry file, or undefined if the geometry file is not open.
  int        geometryGroupID;      // NetCDF Group ID in geometry file, or undefined if the geometry file is not open.
  StatusEnum parameterFileStatus;  // Open/closed status of parameter file.
  int        parameterFileID;      // NetCDF File ID of parameter file, or undefined if the parameter file is not open.
  int        parameterGroupID;     // NetCDF Group ID in parameter file, or undefined if the parameter file is not open.
  StatusEnum stateFileStatus;      // Open/closed status of state file.
  int        stateFileID;          // NetCDF File ID of state file, or undefined if the state file is not open.
  int        stateGroupID;         // NetCDF Group ID in state file, or undefined if the state file is not open.

  // Use geometryGroupID as the ncid when accessing the following variables.
  int meshElementNodeIndicesVarID;        // NetCDF Variable ID in geometry file for the indices into the node variables for each vertex of each element,
                                          // or undefined if the geometry file is not open.
  int meshNodeXYZSurfaceCoordinatesVarID; // NetCDF Variable ID in geometry file for node X,Y,Z surface coordinates,
                                          // or undefined if the geometry file is not open.
  int meshNodeZBedrockCoordinatesVarID;   // NetCDF Variable ID in geometry file for node Z bedrock coordinates at the same X,Y coordinates as
                                          // meshNodeXYZSurfaceCoordinatesVarID, or undefined if the geometry file is not open.
  int meshEdgeLengthVarID;                // NetCDF Variable ID in geometry file for the length of each edge of each element,
                                          // or undefined if the geometry file is not open.
  int meshEdgeNormalXVarID;               // NetCDF Variable ID in geometry file for the X component of the unit normal vector of each edge of each element,
                                          // or undefined if the geometry file is not open.
  int meshEdgeNormalYVarID;               // NetCDF Variable ID in geometry file for the Y component of the unit normal vector of each edge of each element,
                                          // or undefined if the geometry file is not open.
  int meshElementXVarID;                  // NetCDF Variable ID in geometry file for the X coordinate of the center of each element,
                                          // or undefined if the geometry file is not open.
  int meshElementYVarID;                  // NetCDF Variable ID in geometry file for the Y coordinate of the center of each element,
                                          // or undefined if the geometry file is not open.
  int meshElementZSurfaceVarID;           // NetCDF Variable ID in geometry file for the Z surface coordinate of the center of each element,
                                          // or undefined if the geometry file is not open.
  int meshElementZBedrockVarID;           // NetCDF Variable ID in geometry file for the Z bedrock coordinate of the center of each element,
                                          // or undefined if the geometry file is not open.
  int meshElementAreaVarID;               // NetCDF Variable ID in geometry file for the area of each element,
                                          // or undefined if the geometry file is not open.
  int meshNeighborIndicesVarID;           // NetCDF Variable ID in geometry file for the indices into the element variables for each neighbor of each element,
                                          // or undefined if the geometry file is not open.
  int meshNeighborReciprocalEdgeVarID;    // NetCDF Variable ID in geometry file for the reciprocal edge of each neighbor of each element,
                                          // or undefined if the geometry file is not open.

  // Use parameterGroupID as the ncid when accessing the following variables.
  int meshElementCatchmentVarID;    // NetCDF Variable ID in parameter file for the catchment of each element,
                                    // or undefined if the parameter file is not open.
  int meshElementConductivityVarID; // NetCDF Variable ID in parameter file for the conductivity of each element,
                                    // or undefined if the parameter file is not open.
  int meshElementPorosityVarID;     // NetCDF Variable ID in parameter file for the porosity of each element,
                                    // or undefined if the parameter file is not open.
  int meshElementManningsNVarID;    // NetCDF Variable ID in parameter file for the manning's n of each element,
                                    // or undefined if the parameter file is not open.
  
  // Use stateGroupID as the ncid when accessing the following variables.
  int meshElementSurfacewaterDepthVarID;       // NetCDF Variable ID in state file for the surfacewater depth of each element,
                                               // or undefined if the state file is not open.
  int meshElementSurfacewaterErrorVarID;       // NetCDF Variable ID in state file for the surfacewater error of each element,
                                               // or undefined if the state file is not open.
  int meshElementGroundwaterHeadVarID;         // NetCDF Variable ID in state file for the groundwater head of each element,
                                               // or undefined if the state file is not open.
  int meshElementGroundwaterErrorVarID;        // NetCDF Variable ID in state file for the groundwater error of each element,
                                               // or undefined if the state file is not open.
  int meshElementGroundwaterRechargeVarID;     // NetCDF Variable ID in state file for the groundwater recharge of each element,
                                               // or undefined if the state file is not open.
  int meshEdgeSurfacewaterFlowRateVarID;       // NetCDF Variable ID in state file for the surfacewater flow rate of each element,
                                               // or undefined if the state file is not open.
  int meshEdgeSurfacewaterCumulativeFlowVarID; // NetCDF Variable ID in state file for the surfacewater cumulative flow of each element,
                                               // or undefined if the state file is not open.
  int meshEdgeGroundwaterFlowRateVarID;        // NetCDF Variable ID in state file for the groundwater flow rate of each element,
                                               // or undefined if the state file is not open.
  int meshEdgeGroundwaterCumulativeFlowVarID;  // NetCDF Variable ID in state file for the groundwater cumulative flow of each element,
                                               // or undefined if the state file is not open.
  
private:

  // Handle a message directing the file manager to open files.  Contribute to
  // an empty reduction as a barrier when complete or exit on error.
  //
  // There is a fixed set of files and data items that the file manager handles.
  // The function parameters can direct which of the set of files should be
  // opened for read or write, or created, or not, but the file manager accesses
  // a fixed set of data items for each file.
  //
  // Once a file is open, the data can be accessed through the NetCDF IDs in
  // public member variables.
  //
  // Parameters:
  //
  // directoryLength              - The length of the array directory passed by
  //                                Charm++.  This is not guaranteed to be
  //                                strlen(directory).  It could be longer.
  // directory                    - The directory path of the location of the
  //                                files.
  // numberOfMeshElementsToCreate - The number of mesh elements to use when
  //                                creating data items.  This is ignored when
  //                                reading data items.  The size of the data
  //                                item is read from the file instead.
  // numberOfMeshElementsToCreate - The number of mesh nodes to use when
  //                                creating data items.  This is ignored when
  //                                reading data items.  The size of the data
  //                                item is read from the file instead.
  // geometryAction               - What to do for the geometry file.
  // geometryGroup                - The name for the group in the geometry file.
  // parameterAction              - What to do for the parameter file.
  // parameterGroup               - The name for the group in the parameter file.
  // stateAction                  - What to do for the state file.
  // stateGroup                   - The name for the group in the state file.
  void handleOpenFiles(int directoryLength, char* directory, int numberOfMeshElementsToCreate, int numberOfMeshNodesToCreate,
                       FileManagerActionEnum geometryAction, int geometryGroup, FileManagerActionEnum parameterAction, int parameterGroup,
                       FileManagerActionEnum stateAction, int stateGroup);
  
  // Helper function to get the ID of a variable if reading or create a variable if writing.
  //
  // Returns: true if there is an error, false otherwise.
  //
  // Parameters:
  //
  // action       - The action being taken on the variable.
  // fileName     - The file in which to create the variable.  Only used for
  //                error messages. Should either be "geometry", "parameter",
  //                or "state".
  // groupID      - NetCDF group in which to create the variable.
  // variableName - Name of varaible.
  // variableID   - Scalar passed by reference gets filled in with the NetCDF
  //                variable ID.
  // variableType - The type of the variable.  If reading it is an error for
  //                the variable to have a different type than this.
  // numDims      - The number of dimensions of the variable.  If reading it is
  //                an error for the variable to have a different number of
  //                dimensions than this.
  // dimID0       - The first dimension of the variable to create.  Unused if
  //                reading.
  // dimID1       - The second dimension of the variable to create.  Unused if
  //                reading or numDims is 1.
  // sizeToCreate - The size of the variable to create.  Unused if reading.
  //                The size is actually determined by dimID0, but we need to
  //                know the size, and we have it at the point when we call
  //                this function so passing it in prevents us from having to
  //                make a NetCDF call to get the size of dimID0.
  // sizeShouldBe - Scalar passed by reference.  Should either be
  //                &numberOfMeshElements or &numberOfMeshNodes.  If set to -1
  //                gets filled in with the size of the variable.  Otherwise it
  //                is an error for the size of the variable to be different
  //                than this.
  bool getIDOfOrCreateVariable(FileManagerActionEnum action, const char* fileName, int groupID, const char* variableName, int* variableID,
                               nc_type variableType, int numDims, int dimID0, int dimID1, int sizeToCreate, int* sizeShouldBe);

  // Handle a message directing the file manager to close files.  Contribute to
  // an empty reduction as a barrier when complete or exit on error.
  void handleCloseFiles();
};

PUPbytes(FileManagerActionEnum);
PUPbytes(FileManager::StatusEnum);

#endif // __FILE_MANAGER_H__
