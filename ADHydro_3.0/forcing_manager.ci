module forcing_manager
{
    group ForcingManager
    {
        // Constructor.
        entry ForcingManager();
        
        // Dummy function for structured dagger.
        entry void runUntilSimulationEnd()
        {
            while (nextForcingTime < simulationEndTime)
            {
                // When a Region receives forcing data it sends a message back to the ForcingManagers letting them know it is ready for them to queue up the next forcing data.
                // The first time a ForcingManager receives a message asking for the next time that hasn't been sent out yet it loads and sends that forcing data to everyone.
                // Later messages asking for the same time are ignored.
                when readyForForcing(double forcingTime)
                {
                    serial
                    {
                        if (DEBUG_LEVEL & DEBUG_LEVEL_PUBLIC_FUNCTIONS_SIMPLE)
                        {
                            if (!(forcingTime <= nextForcingTime))
                            {
                                CkError("ERROR in ForcingManager::runUntilSimulationEnd: readyForForcing message received for a future time beyond nextForcingTime, which is an error.\n");
                                CkExit();
                            }
                        }
                        
                        if (forcingTime == nextForcingTime)
                        {
                            // Someone is ready for the next forcing.  Load it up and send it out.
                            if (readAndSendForcing())
                            {
                                CkExit();
                            }
                        }
                        // else forcingTime < nextForcingTime.  We have already sent out that forcing.  Do nothing.
                    }
                }
            }
        }; // End entry void runUntilSimulationEnd().
        
        entry void readyForForcing(double forcingTime);
    }; // End group ForcingManager.
}; // End module forcing_manager.
