module region
{
    array [1D] Region
    {
        // Constructor.
        entry Region();
        
        // Dummy function for structured dagger.
        entry void runUntilSimulationEnd()
        {
            // Do initialization.  First receive the number of elements you will be getting.
            when sendNumberOfElements(size_t numberOfMeshElementsInThisRegion, size_t numberOfChannelElementsInThisRegion)
            {
                serial
                {
                    numberOfMeshElements    = numberOfMeshElementsInThisRegion;
                    numberOfChannelElements = numberOfChannelElementsInThisRegion;
                }
            }
            
            // Then receive all elements.
            // FIXME performance optimization aggregate initialization messages.
            while (meshElements.size() < numberOfMeshElements || channelElements.size() < numberOfChannelElements)
            {
                case
                {
                    when sendInitializeMeshElement(const MeshElement& element)
                    {
                        serial
                        {
                            std::map<size_t, std::vector<NeighborMessage> >::iterator itMessage;        // Loop iterator.
                            std::map<size_t, std::vector<NeighborMessage> >           outgoingMessages; // Container to aggregate outgoing messages to other regions.  Key is region ID number of message destination.
                            // FIXME outgoingMessages could be made a member variable of Region to avoid repeated construction/destruction of vectors.
                            
                            if (DEBUG_LEVEL & DEBUG_LEVEL_PUBLIC_FUNCTIONS_SIMPLE)
                            {
                                if (element.checkInvariant())
                                {
                                    CkExit();
                                }
                            }
                            
                            // FIXME check that this isn't a duplicate element.
                            meshElements.insert(std::pair<size_t, MeshElement>(element.getElementNumber(), element));
                            
                            // Send messages to initialize NeighborProxy remote neighbor attributes.
                            if (meshElements[element.getElementNumber()].sendNeighborAttributes(outgoingMessages, elementsFinished))
                            {
                                CkExit();
                            }
                            
                            for (itMessage = outgoingMessages.begin(); itMessage != outgoingMessages.end(); ++itMessage)
                            {
                                // Here I can't shortcut and pass NeighborMessages directly to a recipient who is on the same PE.  This applies even if the recipient is me.
                                // I have to wait until the recipient has received initialize messages for all of its elements so that they are inserted in the appropriate maps.
                                // The easiest way to do this is to hand the message to Charm++ and let the SDAG state machine handle it.
                                thisProxy[itMessage->first].sendNeighborAttributes(itMessage->second);
                            }
                        }
                    }
                    
                    when sendInitializeChannelElement(const ChannelElement& element)
                    {
                        serial
                        {
                            std::map<size_t, std::vector<NeighborMessage> >::iterator itMessage;        // Loop iterator.
                            std::map<size_t, std::vector<NeighborMessage> >           outgoingMessages; // Container to aggregate outgoing messages to other regions.  Key is region ID number of message destination.
                            // FIXME outgoingMessages could be made a member variable of Region to avoid repeated construction/destruction of vectors.
                            
                            if (DEBUG_LEVEL & DEBUG_LEVEL_PUBLIC_FUNCTIONS_SIMPLE)
                            {
                                if (element.checkInvariant())
                                {
                                    CkExit();
                                }
                            }
                            
                            // FIXME check that this isn't a duplicate element.
                            channelElements.insert(std::pair<size_t, ChannelElement>(element.getElementNumber(), element));
                            
                            // Send messages to initialize NeighborProxy remote neighbor attributes.
                            if (channelElements[element.getElementNumber()].sendNeighborAttributes(outgoingMessages, elementsFinished))
                            {
                                CkExit();
                            }
                            
                            for (itMessage = outgoingMessages.begin(); itMessage != outgoingMessages.end(); ++itMessage)
                            {
                                // Here I can't shortcut and pass NeighborMessages directly to a recipient who is on the same PE.  This applies even if the recipient is me.
                                // I have to wait until the recipient has received initialize messages for all of its elements so that they are inserted in the appropriate maps.
                                // The easiest way to do this is to hand the message to Charm++ and let the SDAG state machine handle it.
                                thisProxy[itMessage->first].sendNeighborAttributes(itMessage->second);
                            }
                        }
                    }
                }
            }
            
            // Receive until all NeighborProxies are initialized.
            while (meshElements.size() + channelElements.size() > elementsFinished)
            {
                when sendNeighborAttributes(const std::vector<NeighborMessage>& messages)
                {
                    serial
                    {
                        receiveMessages(messages);
                    }
                }
            }
            
            // Run the simulation.
            while (currentTime < simulationEndTime)
            {
                // Check if it is time to check the invariant.
                // FIXME only do it if DEBUG_LEVEL is right.
                if (currentTime == nextSyncTime())
                {
                    serial
                    {
                        long   year;   // For printing date and time of invariant check.
                        long   month;  // For printing date and time of invariant check.
                        long   day;    // For printing date and time of invariant check.
                        long   hour;   // For printing date and time of invariant check.
                        long   minute; // For printing date and time of invariant check.
                        double second; // For printing date and time of invariant check.
                        
                        // Print out that we are checking the invariant.
                        if (0 == thisIndex && 1 <= Readonly::verbosityLevel)
                        {
                            julianToGregorian(Readonly::referenceDate + currentTime / ONE_DAY_IN_SECONDS, &year, &month, &day, &hour, &minute, &second);
                            CkPrintf("Checking invariant at simulation time %.0lf, date and time %02ld/%02ld/%04ld %02ld:%02ld:%02.0lf\n", currentTime, month, day, year, hour, minute, second);
                        }
                        
                        if (checkInvariant())
                        {
                            CkExit();
                        }
                    }
                }
                
                // Check if it is time to receive forcing data.
                if (currentTime == nextForcingTime)
                {
                    serial
                    {
                        elementsFinished = 0;
                    }
                    
                    // Receive until all elements have their forcing updated.
                    while (meshElements.size() + channelElements.size() > elementsFinished)
                    {
                        when sendForcing(double forcingTime, double newNextForcingTime, std::map<size_t, EvapoTranspirationForcingStruct>& meshForcing, std::map<size_t, EvapoTranspirationForcingStruct>& channelForcing)
                        {
                            serial
                            {
                                std::map<size_t, EvapoTranspirationForcingStruct>::iterator it; // Loop iterator.
                                
                                if (currentTime < forcingTime)
                                {
                                    // This is a message from the future, don't receive it yet.
                                    thisProxy[thisIndex].sendForcing(forcingTime, newNextForcingTime, meshForcing, channelForcing);
                                }
                                else
                                {
                                    if (DEBUG_LEVEL & DEBUG_LEVEL_PUBLIC_FUNCTIONS_SIMPLE)
                                    {
                                        if (!(forcingTime == currentTime))
                                        {
                                            CkError("ERROR in Region::runUntilSimulationEnd: forcing message received from the past, which is an error.\n");
                                            CkExit();
                                        }
                                        
                                        if (!(newNextForcingTime > currentTime))
                                        {
                                            CkError("ERROR in Region::runUntilSimulationEnd: newNextForcingTime must be greater than currentTime.\n");
                                            CkExit();
                                        }
                                        
                                        if (!(nextForcingTime == currentTime || nextForcingTime == newNextForcingTime))
                                        {
                                            CkError("ERROR in Region::runUntilSimulationEnd: nextForcingTime must be equal to currentTime or newNextForcingTime.\n");
                                            CkExit();
                                        }
                                    }
                                    
                                    // Store forcing data.
                                    // FIXME make sure we have the element that the forcing is for.
                                    // FIXME make sure we don't receive duplicate forcing for an element.
                                    for (it = meshForcing.begin(); it != meshForcing.end(); ++it)
                                    {
                                        meshElements[it->first].setEvapoTranspirationForcing(it->second);
                                    }
                                    
                                    for (it = channelForcing.begin(); it != channelForcing.end(); ++it)
                                    {
                                        channelElements[it->first].setEvapoTranspirationForcing(it->second);
                                    }
                                    
                                    elementsFinished += meshForcing.size() + channelForcing.size();
                                    
                                    if (nextForcingTime != newNextForcingTime)
                                    {
                                        // Let the ForcingManagers know I'm ready for them to queue up the next forcing.
                                        nextForcingTime = newNextForcingTime;
                                        
                                        ADHydro::forcingManagerProxy.readyForForcing(nextForcingTime);
                                    }
                                }
                            }
                        }
                    }
                }
                
                // Step 1: Calculate nominal flow rates with neighbors.
                serial
                {
                    std::map<size_t,                MeshElement>::iterator itMesh;           // Loop iterator.
                    std::map<size_t,             ChannelElement>::iterator itChannel;        // Loop iterator.
                    std::map<size_t, std::vector<StateMessage> >::iterator itMessage;        // Loop iterator.
                    std::map<size_t, std::vector<StateMessage> >           outgoingMessages; // Container to aggregate outgoing messages to other regions.  Key is region ID number of message destination.
                    // FIXME outgoingMessages could be made a member variable of Region to avoid repeated construction/destruction of vectors.
                    
                    elementsFinished = 0;
                    
                    // Loop over all elements, who will loop over all of their NeighborProxies telling them to calculate their nominal flow rate if it has expired.
                    // FIXME it could be more efficient to have two loops, the first sends all messages, and the second does all calculation that doesn't require messages.
                    // This would provide more time for overlapping computation and communication.
                    // FIXME For internal neighbors, I could always calculate a new nominal flow rate each timestep.  It may be inexpensive since it won't require a message.
                    for (itMesh = meshElements.begin(); itMesh != meshElements.end(); ++itMesh)
                    {
                        if (itMesh->second.calculateNominalFlowRates(outgoingMessages, elementsFinished, currentTime))
                        {
                            CkExit();
                        }
                    }
                    
                    for (itChannel = channelElements.begin(); itChannel != channelElements.end(); ++itChannel)
                    {
                        if (itChannel->second.calculateNominalFlowRates(outgoingMessages, elementsFinished, currentTime))
                        {
                            CkExit();
                        }
                    }
                    
                    // Send messages for NeighborProxies that need to communicate with neighbors in other regions before calculating their nominal flow rate.
                    for (itMessage = outgoingMessages.begin(); itMessage != outgoingMessages.end(); ++itMessage)
                    {
                        if (itMessage->first == thisIndex)
                        {
                            // Don't need to send a message to myself.  Just receive the message immediately.
                            // FIXME will I send messages at all?
                            receiveMessages(itMessage->second);
                        }
                        else
                        {
                            // FIXME what if the other region is on the same PE as me?  Shortcut further down?
                            thisProxy[itMessage->first].sendState(currentTime, itMessage->second);
                        }
                    }
                }
                
                // Finish step 1 for any NeighborProxies that need to receive a message before calculating their nominal flow rate.
                while (meshElements.size() + channelElements.size() > elementsFinished)
                {
                    when sendState(double messageTime, const std::vector<StateMessage>& messages)
                    {
                        serial
                        {
                            if (currentTime < messageTime)
                            {
                                // This is a message from the future, don't receive it yet.
                                thisProxy[thisIndex].sendState(messageTime, messages);
                            }
                            else
                            {
                                if (DEBUG_LEVEL & DEBUG_LEVEL_PUBLIC_FUNCTIONS_SIMPLE)
                                {
                                    if (!(currentTime == messageTime))
                                    {
                                        CkError("ERROR in Region::runUntilSimulationEnd: state message received from the past, which is an error.\n");
                                        CkExit();
                                    }
                                }
                                
                                receiveMessages(messages);
                            }
                        }
                    }
                }
                
                // Step 2: Select timestep.
                // Step 3: Send outflows of water to neighbors.
                serial
                {
                    std::map<size_t,                MeshElement>::iterator itMesh;           // Loop iterator.
                    std::map<size_t,             ChannelElement>::iterator itChannel;        // Loop iterator.
                    std::map<size_t, std::vector<WaterMessage> >::iterator itMessage;        // Loop iterator.
                    std::map<size_t, std::vector<WaterMessage> >           outgoingMessages; // Container to aggregate outgoing messages to other regions.  Key is region ID number of message destination.
                    // FIXME outgoingMessages could be made a member variable of Region to prevent repeated construction/destruction of vectors.
                    
                    // Initially set timestepEndTime to be a time that we know we cannot exceed, either the next forcing read, checkpoint write, or simulationEndTime.
                    // Because there is always a checkpoint output at the end of the simulation, we don't need to check against simulationEndTime.
                    timestepEndTime = nextSyncTime();
                    
                    // Set timestepEndTime to be no later than any expirationTime.
                    for (itMesh = meshElements.begin(); itMesh != meshElements.end(); ++itMesh)
                    {
                        timestepEndTime = std::min(timestepEndTime, itMesh->second.minimumExpirationTime());
                    }
                    
                    for (itChannel = channelElements.begin(); itChannel != channelElements.end(); ++itChannel)
                    {
                        timestepEndTime = std::min(timestepEndTime, itChannel->second.minimumExpirationTime());
                    }
                    
                    elementsFinished = 0;
                    
                    // Loop over all elements updating state for point processes and sending outflows.
                    for (itMesh = meshElements.begin(); itMesh != meshElements.end(); ++itMesh)
                    {
                        if (itMesh->second.doPointProcessesAndSendOutflows(outgoingMessages, elementsFinished, currentTime, timestepEndTime))
                        {
                            CkExit();
                        }
                    }
                    
                    for (itChannel = channelElements.begin(); itChannel != channelElements.end(); ++itChannel)
                    {
                        if (itChannel->second.doPointProcessesAndSendOutflows(outgoingMessages, elementsFinished, currentTime, timestepEndTime))
                        {
                            CkExit();
                        }
                    }
                    
                    // Send messages for outflows.
                    for (itMessage = outgoingMessages.begin(); itMessage != outgoingMessages.end(); ++itMessage)
                    {
                        if (itMessage->first == thisIndex)
                        {
                            // Don't need to send a message to myself.  Just receive the message immediately.
                            // FIXME will I send messages at all?
                            receiveMessages(itMessage->second);
                        }
                        else
                        {
                            // FIXME what if the other region is on the same PE as me?  Shortcut further down?
                            thisProxy[itMessage->first].sendWater(itMessage->second);
                        }
                    }
                }
                
                // Step 4: Receive inflows of water from neighbors.
                while (meshElements.size() + channelElements.size() > elementsFinished)
                {
                    when sendWater(const std::vector<WaterMessage>& messages)
                    {
                        serial
                        {
                            receiveMessages(messages);
                        }
                    }
                }
                
                // Finish step 4 by updating state.
                // Step 5: Advance time.
                serial
                {
                    std::map<size_t,                                                    MeshElement>::iterator itMesh;        // Loop iterator.
                    std::map<size_t,                                                 ChannelElement>::iterator itChannel;     // Loop iterator.
                    std::map<size_t, std::pair<std::vector<MeshState>, std::vector<ChannelState> > >::iterator itState;       // Loop iterator.
                    std::map<size_t, std::pair<std::vector<MeshState>, std::vector<ChannelState> > >           outgoingState; // State going to various OutputManagers.  Key is the destination PE.
                    size_t                                                                                     elementHome;   // The home PE of an element.
                    // FIXME outgoingState could be made a member variable of Region to prevent repeated construction/destruction of vectors.
                    
                    for (itMesh = meshElements.begin(); itMesh != meshElements.end(); ++itMesh)
                    {
                        if (itMesh->second.receiveInflowsAndUpdateState(currentTime, timestepEndTime))
                        {
                            CkExit();
                        }
                    }
                    
                    for (itChannel = channelElements.begin(); itChannel != channelElements.end(); ++itChannel)
                    {
                        if (itChannel->second.receiveInflowsAndUpdateState(currentTime, timestepEndTime))
                        {
                            CkExit();
                        }
                    }
                    
                    currentTime = timestepEndTime;
                    
                    // Check if it is time to output a checkpoint.
                    if (currentTime == Readonly::getCheckpointTime(nextCheckpointIndex))
                    {
                        for (itMesh = meshElements.begin(); itMesh != meshElements.end(); ++itMesh)
                        {
                            elementHome = Readonly::home(itMesh->first, Readonly::globalNumberOfMeshElements, CkNumPes());
                            outgoingState[elementHome].first.resize(outgoingState[elementHome].first.size() + 1); // FIXME see if there's a way to figure out the final size before resizing.
                            
                            if (itMesh->second.fillInState(outgoingState[elementHome].first.back()))
                            {
                                CkExit();
                            }
                        }
                        
                        for (itChannel = channelElements.begin(); itChannel != channelElements.end(); ++itChannel)
                        {
                            elementHome = Readonly::home(itChannel->first, Readonly::globalNumberOfChannelElements, CkNumPes());
                            outgoingState[elementHome].second.resize(outgoingState[elementHome].second.size() + 1); // FIXME see if there's a way to figure out the final size before resizing.
                            
                            if (itChannel->second.fillInState(outgoingState[elementHome].second.back()))
                            {
                                CkExit();
                            }
                        }
                        
                        for (itState = outgoingState.begin(); itState != outgoingState.end(); ++itState)
                        {
                            ADHydro::checkpointManagerProxy[itState->first].sendState(nextCheckpointIndex, itState->second.first, itState->second.second);
                        }
                        
                        ++nextCheckpointIndex;
                    }
                }
            } // End while (currentTime < simulationEndTime).
        }; // End entry void runUntilSimulationEnd().
        
        entry void sendNumberOfElements(size_t numberOfMeshElementsInThisRegion, size_t numberOfChannelElementsInThisRegion);
        entry void sendInitializeMeshElement(const MeshElement& element);
        entry void sendInitializeChannelElement(const ChannelElement& element);
        entry void sendNeighborAttributes(const std::vector<NeighborMessage>& messages);
        entry void sendForcing(double forcingTime, double newNextForcingTime, std::map<size_t, EvapoTranspirationForcingStruct>& meshForcing, std::map<size_t, EvapoTranspirationForcingStruct>& channelForcing);
        entry void sendState(double messageTime, const std::vector<StateMessage>& messages);
        entry void sendWater(const std::vector<WaterMessage>& messages);
    }; // End array [1D] Region.
}; // End module region.
