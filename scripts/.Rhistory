##########################################################################################################################################################
# Code to read, clip and export WRF forcing data to ADHydro (UW) in netcdf format
# Hernan Moreno
# Aug 19 2014
##########################################################################################################################################################
# The final output file will be an array of two dimensions (node and time) and length(Outnames) variables. The variables that go in the columns are up to now:
# (1) WRFHOUR (2) JULTIME (3) T2 [Celsius], (4) Q2 [kg/kg], (5) QVAPOR[kg/kg], (6)QCLOUD[kg/kg], (7)PSFC [Pa], (8) U10 [m/s], (9) V10 [m/s], (10) U, (11) V, (12) VEGFRA [-],
# (13) MAXVEGFRA, (14) TPREC (RAINC+RAINSH+RAINCC) [m/s],(15) FRAC_FROZ_PREC (SNOWNC+GRAUPELNC+HAILNC) [m/s], (16) SWDOWN [w/m2], (17) GLW [W/M2], (18) PBLH [m],
# (19) SOILTB[Celsius], (20) TSLB [Celsius]
# Caveat: all times are in GMT time
################# LOAD LIBRARIES #########################################################################################################################
rm(list=ls())  # remove all objects before starting
library(ncdf4)
library(abind)
library(timeDate)
################ INPUT MODULE ############################################################################################################################
WRF_Folder<<-"/share/CI-WATER Simulation Data/WRF/Utah_WRF_output/2005/"  # path to the WRF files
WRF_Files<<-c("wrfout_d03_2005-01-01_00:00:00","wrfout_d03_2005-01-31_12:00:00","wrfout_d03_2005-03-03_00:00:00") # ordered names of the WRF files to read
TINF<<-"/share/CI-WATER Simulation Data/small_green_mesh/geometry.nc"  # netcdf file with the AD-Hydro mesh elements for which the WRF data will be extracted
RE=6378137  # in meters; Earth's radius at the equator GRS80 ellipsoid
Lambda00<<--109  # reference meridian in degrees. Sign indicates if it's west or east of Greenwich
FalseEast<<-20000000
FalseNorth<<-10000000
cell_Buffer<<-4 # number of cells to be added to the selected rectangular from the minimum and maximum TIN points to efficiently read the WRF data. Use a number >2
soillayers<<-4  # number of total staggered soil layers. It can be extracted from the Rncdump.txt file from line 39
JulOrigin<<-"2005-01-01 00:00:00" # origin for the Julian date column
Outnames<<-c("WRFHOUR","JULTIME","T2","Q2","QVAPOR","QCLOUD","PSFC","U10","V10","U","V","VEGFRA","MAXVEGFRA","TPREC","FRAC_FROZ_PREC","SWDOWN","GLW","PBLH","SOILTB","TSLB")
Outfolder<<-"/share/CI-WATER Simulation Data/WRF_to_ADHydro/"
Outncfile<<-"WRF_ADHydro_Green_River" # Base name for output file
##########################################################################################################################################################
# Code to read, clip and export WRF forcing data to ADHydro (UW) in netcdf format
# Hernan Moreno
# Aug 19 2014
##########################################################################################################################################################
# The final output file will be an array of two dimensions (node and time) and length(Outnames) variables. The variables that go in the columns are up to now:
# (1) WRFHOUR (2) JULTIME (3) T2 [Celsius], (4) Q2 [kg/kg], (5) QVAPOR[kg/kg], (6)QCLOUD[kg/kg], (7)PSFC [Pa], (8) U10 [m/s], (9) V10 [m/s], (10) U, (11) V, (12) VEGFRA [-],
# (13) MAXVEGFRA, (14) TPREC (RAINC+RAINSH+RAINCC) [m/s],(15) FRAC_FROZ_PREC (SNOWNC+GRAUPELNC+HAILNC) [m/s], (16) SWDOWN [w/m2], (17) GLW [W/M2], (18) PBLH [m],
# (19) SOILTB[Celsius], (20) TSLB [Celsius]
# Caveat: all times are in GMT time
################# LOAD LIBRARIES #########################################################################################################################
rm(list=ls())  # remove all objects before starting
library(ncdf4)
library(abind)
library(timeDate)
################ INPUT MODULE ############################################################################################################################
WRF_Folder<<-"/share/CI-WATER Simulation Data/WRF/Utah_WRF_output/2005/"  # path to the WRF files
WRF_Files<<-c("wrfout_d03_2005-01-01_00:00:00","wrfout_d03_2005-01-31_12:00:00","wrfout_d03_2005-03-03_00:00:00") # ordered names of the WRF files to read
TINF<<-"/share/CI-WATER Simulation Data/small_green_mesh/geometry.nc"  # netcdf file with the AD-Hydro mesh elements for which the WRF data will be extracted
RE=6378137  # in meters; Earth's radius at the equator GRS80 ellipsoid
Lambda00<<--109  # reference meridian in degrees. Sign indicates if it's west or east of Greenwich
FalseEast<<-20000000
FalseNorth<<-10000000
cell_Buffer<<-4 # number of cells to be added to the selected rectangular from the minimum and maximum TIN points to efficiently read the WRF data. Use a number >2
soillayers<<-4  # number of total staggered soil layers. It can be extracted from the Rncdump.txt file from line 39
JulOrigin<<-"2005-01-01 00:00:00" # origin for the Julian date column
Outnames<<-c("WRFHOUR","JULTIME","T2","Q2","QVAPOR","QCLOUD","PSFC","U10","V10","U","V","VEGFRA","MAXVEGFRA","TPREC","FRAC_FROZ_PREC","SWDOWN","GLW","PBLH","SOILTB","TSLB")
Outfolder<<-"/share/CI-WATER Simulation Data/WRF_to_ADHydro/"
Outncfile<<-"WRF_ADHydro_Small_Green_River" # Base name for output file
#
cat("Time started processing ",date(),fill=TRUE)
## This module is optional.. It takes an example file and prints the file and variable information
ex.nc = nc_open(paste(WRF_Folder, WRF_Files[1], sep="")) # it opens the first file
Rdump=capture.output(print(ex.nc), file = NULL, append = FALSE)
write.table(Rdump,paste(Outfolder,"Rncdump.txt",sep=""),quote=FALSE,col.names=FALSE,row.names=FALSE)   ## dumps netcdf headers to a file in outfolder
cat("A dump file has been created in Outfolder called Rncdump",fill=TRUE)
cat("Time started processing ",date(),fill=TRUE)
## This module is optional.. It takes an example file and prints the file and variable information
ex.nc = nc_open(paste(WRF_Folder, WRF_Files[1], sep="")) # it opens the first file
Rdump=capture.output(print(ex.nc), file = NULL, append = FALSE)
write.table(Rdump,paste(Outfolder,"Rncdump.txt",sep=""),quote=FALSE,col.names=FALSE,row.names=FALSE)   ## dumps netcdf headers to a file in outfolder
cat("A dump file has been created in ", Outfolder," called Rncdump",fill=TRUE)
mesh.nc = nc_open(TINF) # it opens the first file
Rdump_mesh=capture.output(print(mesh.nc), file = NULL, append = FALSE)
write.table(Rdump_mesh,paste(Outfolder,"Rncdump_mesh.txt",sep=""),quote=FALSE,col.names=FALSE,row.names=FALSE)   ## dumps netcdf headers of geometry to a file in outfolder
NTIN = ncvar_get(mesh.nc, "numberOfMeshElements")
length(NTIN)
NTIN
TIN = ncvar_get(mesh.nc, "meshElementX")
TIN
class(TIN)
dim(TIN)
TIN[1,1,1]
TIN[1,1]
TIN[1]
TINY = ncvar_get(mesh.nc, "meshElementY")
TIN= cbind(TINX,TINY)
TINX = ncvar_get(mesh.nc, "meshElementX")
TINY = ncvar_get(mesh.nc, "meshElementY")
TIN= cbind(TINX,TINY)
dim(TIN)
x11()
par(mfcol=c(1,2))
plot(TIN[,2],TIN[,3],pch=19,cex=0.2,main="Basin domain")
length(TINX)
length(TINX)-1
TINX = ncvar_get(mesh.nc, "meshElementX")
TINY = ncvar_get(mesh.nc, "meshElementY")
TIN= cbind(seq(0,(length(TINX)-1)),TINX,TINY)
dim(TIN)
x11()
par(mfcol=c(1,2))
plot(TIN[,2],TIN[,3],pch=19,cex=0.2,main="Basin domain")
## Read only the dimension file to determine matrices size
LON_WRF = ncvar_get(ex.nc, "XLONG")   # Matrix of longitudes in this order: (west_east,south_north,times)
LAT_WRF = ncvar_get(ex.nc, "XLAT")   # Matrix of latitudes
rowss=dim(LON_WRF)[2]
colss=dim(LON_WRF)[1]
TIMES=dim(LON_WRF)[3]  # normally the third dimension are times
#### Cell-centered coordinate transformation ##########################################################################################################
# Transform LON-LAT matrices to sinusoidal projection
Lambda0=Lambda00*(pi/180)  # degrees to radians
xs=RE*((LON_WRF[,,1]*pi/180)-Lambda0)*cos(LAT_WRF[,,1]*pi/180)+FalseEast
ys=RE*(LAT_WRF[,,1]*pi/180)+FalseNorth
# New module-- extraction of a smaller rectangular area to process data from here on
minxTIN=min(TIN[,2])
maxxTIN=max(TIN[,2])
minyTIN=min(TIN[,3])
maxyTIN=max(TIN[,3])
# Extraction of the points closer to minTIN and maxTIN
distLL=(((minxTIN-xs)^2)+((minyTIN-ys)^2))^0.5
distUR=(((maxxTIN-xs)^2)+((maxyTIN-ys)^2))^0.5
mindLL=min(distLL)
WRFLL=which(distLL==mindLL,arr.ind=TRUE)
mindUR=min(distUR)
WRFUR=which(distUR==mindUR,arr.ind=TRUE)
WRFL=WRFLL-cell_Buffer
WRFU=WRFUR+cell_Buffer
cat("Initial WRF domain had ",dim(xs)," cells",fill=TRUE)
cat("New WRF domain has ",WRFUR-WRFLL+1," cells",fill=TRUE)
cat("Applying buffer matrix has ",WRFU-WRFL+1," cells",fill=TRUE)
## Creating new xs(xss) and ys(yss).. These are smaller matrices that contain only the TIN points
xss=xs[WRFL[1]:WRFU[1],WRFL[2]:WRFU[2]]
yss=ys[WRFL[1]:WRFU[1],WRFL[2]:WRFU[2]]
# Extraction of the cells of WRF that contain each of the TIN nodes for ADHydro
sel_WRF=matrix(NA,dim(TIN)[1],3) # Node, row, col
sel_WRF[,1]=TIN[,1]
mindi=rep(NA,dim(TIN)[1])
cat("** Extracting distances from ADHydro nodes to WRF cells.. may take few minutes...",fill=TRUE)
for (ni in 1:dim(TIN)[1]){
dist=(((TIN[ni,2]-xss)^2)+((TIN[ni,3]-yss)^2))^0.5
mind=min(dist)
mindi[ni]=mind
wmind=which(dist==mind,arr.ind=TRUE)
sel_WRF[ni,2]=wmind[1] # row
sel_WRF[ni,3]=wmind[2] # col
}
cat("** Maximum distance between an AD-Hydro node and WRF cell center is", max(mindi)," m",fill=TRUE)
plot(WRFL[1]+sel_WRF[,2],WRFL[2]+sel_WRF[,3],xlim=c(1,colss),ylim=c(1,rowss),cex=0.2,pch=20,main="Basin domain comparison")
### Staggered coordinate transformation ###############################################################################################################
# Reads only the staggered-LON - LAT field and transform them to sinusoidal coordinates
LONU_WRF = ncvar_get(ex.nc, "XLONG_U",start=c(1,1,1),count=c(colss+1,rowss, 1))   # Matrix of longitudes is in inverse order (south_north, west_east)
LATU_WRF = ncvar_get(ex.nc, "XLAT_U",start=c(1,1,1),count=c(colss+1,rowss, 1))   # Matrix of latitudes
# Transform LONU-LATU, LONV, LATV matrices to sinusoidal projection
xsu=RE*((LONU_WRF*pi/180)-Lambda0)*cos(LATU_WRF*pi/180)+FalseEast   #  xsu and xsv are very similar.. only separated by few meters..so we assume xsu=xsv
ysu=RE*(LATU_WRF*pi/180)+FalseNorth
## Creating new xssu and yssu.. These are smaller matrices that contain only the TIN points, assuming the same corners found for centered cells apply for staggered data
xssu=xsu[WRFL[1]:WRFU[1],WRFL[2]:WRFU[2]]
yssu=ysu[WRFL[1]:WRFU[1],WRFL[2]:WRFU[2]]
# Extraction of the cells of WRF that contain each of the TIN nodes for AD-Hydro
sel_WRFS=matrix(NA,dim(TIN)[1],3) # Node, row, col
sel_WRFS[,1]=TIN[,1]
mindiS=rep(NA,dim(TIN)[1])
cat("** Extracting distances from AD-Hydro nodes to WRF staggered points.. may take few minutes...",fill=TRUE)
for (ni in 1:dim(TIN)[1]){
distS=(((TIN[ni,2]-xssu)^2)+((TIN[ni,3]-yssu)^2))^0.5
mindS=min(distS)
mindiS[ni]=mindS
wmindS=which(distS==mindS,arr.ind=TRUE)
sel_WRFS[ni,2]=wmindS[1] # row
sel_WRFS[ni,3]=wmindS[2] # col
}
cat("** Maximum distance between an ADHydro node and WRF staggered point is", max(mindiS)," m",fill=TRUE)
q()
